# import * from './generated/prisma.graphql'

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String!
  avatar: String
  lastSeenOn: String
  status: String!
  
  ownerOfGuild: [Guild!]!
  memberOf: [Guild!]!
  ownerOfDMs: [Channel!]!
  dmChannels: [Channel!]!
  messages: [Message!]!
}


type Mutation {
  # Auth
  signup(email: String!, password: String!, username: String!, avatar: String) : AuthPayload
  login(email: String!, password: String!): AuthPayload
  logout(lastSeenOn: String!): User
  
  #
  deleteUser(id: ID!) : User
  # Guilds
  createGuild(name: String!, avatar: String): Guild
  joinGuild(slug: String!): Guild
  leaveGuild(id: ID!): Guild
  updateGuild(id: ID!, name: String, avatar: String, newOwner: ID ): Guild
  deleteGuild(id: ID!): Guild
  
  # Channels
  createChannel(id: ID!, type: Int!, name: String!) : Channel
  updateChannelPosition(from: Int!, to: Int!, id: ID!): [Channel!]!
  updateChannel(id: ID!, name: String, topic: String): Channel
  deleteChannel(id: ID!): Channel

  # Messages
  createMessage(id: ID!, content: String!): Message
  updateMessage(id: ID!): Message
  deleteMessage(id: ID!): Message

  # Invites
  createSlug(id: ID!): Slug
}

type Query {
  user(id: ID): User
  guilds: [Guild!]!
  guild(id: ID!): Guild!
  channels(id: ID!, orderBy: ChannelOrderByInput): [Channel!]!
  channel(id: ID!): Channel
  messages(id: ID!, before: ID, last: Int) : MessageConnection!
}

type Subscription {
  newMessage (id: ID!, where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
}