# source: http://localhost:4466
# timestamp: Tue Oct 16 2018 16:47:07 GMT-0700 (Pacific Daylight Time)

type AggregateGuild_members {
  count: Int!
}

type AggregateGuilds {
  count: Int!
}

type AggregateUsers {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Guild_members implements Node {
  id: ID!
  guild(where: GuildsWhereInput): Guilds
  user(where: UsersWhereInput): Users
}

"""A connection to a list of items."""
type Guild_membersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [Guild_membersEdge]!
  aggregate: AggregateGuild_members!
}

input Guild_membersCreateInput {
  guild: GuildsCreateOneWithoutGuild_membersInput
  user: UsersCreateOneWithoutGuild_membersInput
}

input Guild_membersCreateManyWithoutGuildInput {
  create: [Guild_membersCreateWithoutGuildInput!]
  connect: [Guild_membersWhereUniqueInput!]
}

input Guild_membersCreateManyWithoutUserInput {
  create: [Guild_membersCreateWithoutUserInput!]
  connect: [Guild_membersWhereUniqueInput!]
}

input Guild_membersCreateWithoutGuildInput {
  user: UsersCreateOneWithoutGuild_membersInput
}

input Guild_membersCreateWithoutUserInput {
  guild: GuildsCreateOneWithoutGuild_membersInput
}

"""An edge in a connection."""
type Guild_membersEdge {
  """The item at the end of the edge."""
  node: Guild_members!

  """A cursor for use in pagination."""
  cursor: String!
}

enum Guild_membersOrderByInput {
  id_ASC
  id_DESC
}

type Guild_membersPreviousValues {
  id: ID!
}

type Guild_membersSubscriptionPayload {
  mutation: MutationType!
  node: Guild_members
  updatedFields: [String!]
  previousValues: Guild_membersPreviousValues
}

input Guild_membersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [Guild_membersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [Guild_membersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Guild_membersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Guild_membersWhereInput
}

input Guild_membersUpdateInput {
  guild: GuildsUpdateOneWithoutGuild_membersInput
  user: UsersUpdateOneWithoutGuild_membersInput
}

input Guild_membersUpdateManyWithoutGuildInput {
  create: [Guild_membersCreateWithoutGuildInput!]
  connect: [Guild_membersWhereUniqueInput!]
  disconnect: [Guild_membersWhereUniqueInput!]
  delete: [Guild_membersWhereUniqueInput!]
  update: [Guild_membersUpdateWithWhereUniqueWithoutGuildInput!]
  upsert: [Guild_membersUpsertWithWhereUniqueWithoutGuildInput!]
}

input Guild_membersUpdateManyWithoutUserInput {
  create: [Guild_membersCreateWithoutUserInput!]
  connect: [Guild_membersWhereUniqueInput!]
  disconnect: [Guild_membersWhereUniqueInput!]
  delete: [Guild_membersWhereUniqueInput!]
  update: [Guild_membersUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [Guild_membersUpsertWithWhereUniqueWithoutUserInput!]
}

input Guild_membersUpdateWithoutGuildDataInput {
  user: UsersUpdateOneWithoutGuild_membersInput
}

input Guild_membersUpdateWithoutUserDataInput {
  guild: GuildsUpdateOneWithoutGuild_membersInput
}

input Guild_membersUpdateWithWhereUniqueWithoutGuildInput {
  where: Guild_membersWhereUniqueInput!
  data: Guild_membersUpdateWithoutGuildDataInput!
}

input Guild_membersUpdateWithWhereUniqueWithoutUserInput {
  where: Guild_membersWhereUniqueInput!
  data: Guild_membersUpdateWithoutUserDataInput!
}

input Guild_membersUpsertWithWhereUniqueWithoutGuildInput {
  where: Guild_membersWhereUniqueInput!
  update: Guild_membersUpdateWithoutGuildDataInput!
  create: Guild_membersCreateWithoutGuildInput!
}

input Guild_membersUpsertWithWhereUniqueWithoutUserInput {
  where: Guild_membersWhereUniqueInput!
  update: Guild_membersUpdateWithoutUserDataInput!
  create: Guild_membersCreateWithoutUserInput!
}

input Guild_membersWhereInput {
  """Logical AND on all given filters."""
  AND: [Guild_membersWhereInput!]

  """Logical OR on all given filters."""
  OR: [Guild_membersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [Guild_membersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  guild: GuildsWhereInput
  user: UsersWhereInput
}

input Guild_membersWhereUniqueInput {
  id: ID
}

type Guilds implements Node {
  id: ID!
  guild_members(where: Guild_membersWhereInput, orderBy: Guild_membersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guild_members!]
  guildname: String!
  owner(where: UsersWhereInput): Users
}

"""A connection to a list of items."""
type GuildsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GuildsEdge]!
  aggregate: AggregateGuilds!
}

input GuildsCreateInput {
  guildname: String!
  guild_members: Guild_membersCreateManyWithoutGuildInput
  owner: UsersCreateOneWithoutGuildsInput
}

input GuildsCreateManyWithoutOwnerInput {
  create: [GuildsCreateWithoutOwnerInput!]
  connect: [GuildsWhereUniqueInput!]
}

input GuildsCreateOneWithoutGuild_membersInput {
  create: GuildsCreateWithoutGuild_membersInput
  connect: GuildsWhereUniqueInput
}

input GuildsCreateWithoutGuild_membersInput {
  guildname: String!
  owner: UsersCreateOneWithoutGuildsInput
}

input GuildsCreateWithoutOwnerInput {
  guildname: String!
  guild_members: Guild_membersCreateManyWithoutGuildInput
}

"""An edge in a connection."""
type GuildsEdge {
  """The item at the end of the edge."""
  node: Guilds!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GuildsOrderByInput {
  id_ASC
  id_DESC
  guildname_ASC
  guildname_DESC
}

type GuildsPreviousValues {
  id: ID!
  guildname: String!
}

type GuildsSubscriptionPayload {
  mutation: MutationType!
  node: Guilds
  updatedFields: [String!]
  previousValues: GuildsPreviousValues
}

input GuildsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GuildsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuildsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuildsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GuildsWhereInput
}

input GuildsUpdateInput {
  guildname: String
  guild_members: Guild_membersUpdateManyWithoutGuildInput
  owner: UsersUpdateOneWithoutGuildsInput
}

input GuildsUpdateManyWithoutOwnerInput {
  create: [GuildsCreateWithoutOwnerInput!]
  connect: [GuildsWhereUniqueInput!]
  disconnect: [GuildsWhereUniqueInput!]
  delete: [GuildsWhereUniqueInput!]
  update: [GuildsUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [GuildsUpsertWithWhereUniqueWithoutOwnerInput!]
}

input GuildsUpdateOneWithoutGuild_membersInput {
  create: GuildsCreateWithoutGuild_membersInput
  connect: GuildsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GuildsUpdateWithoutGuild_membersDataInput
  upsert: GuildsUpsertWithoutGuild_membersInput
}

input GuildsUpdateWithoutGuild_membersDataInput {
  guildname: String
  owner: UsersUpdateOneWithoutGuildsInput
}

input GuildsUpdateWithoutOwnerDataInput {
  guildname: String
  guild_members: Guild_membersUpdateManyWithoutGuildInput
}

input GuildsUpdateWithWhereUniqueWithoutOwnerInput {
  where: GuildsWhereUniqueInput!
  data: GuildsUpdateWithoutOwnerDataInput!
}

input GuildsUpsertWithoutGuild_membersInput {
  update: GuildsUpdateWithoutGuild_membersDataInput!
  create: GuildsCreateWithoutGuild_membersInput!
}

input GuildsUpsertWithWhereUniqueWithoutOwnerInput {
  where: GuildsWhereUniqueInput!
  update: GuildsUpdateWithoutOwnerDataInput!
  create: GuildsCreateWithoutOwnerInput!
}

input GuildsWhereInput {
  """Logical AND on all given filters."""
  AND: [GuildsWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuildsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuildsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  guildname: String

  """All values that are not equal to given value."""
  guildname_not: String

  """All values that are contained in given list."""
  guildname_in: [String!]

  """All values that are not contained in given list."""
  guildname_not_in: [String!]

  """All values less than the given value."""
  guildname_lt: String

  """All values less than or equal the given value."""
  guildname_lte: String

  """All values greater than the given value."""
  guildname_gt: String

  """All values greater than or equal the given value."""
  guildname_gte: String

  """All values containing the given string."""
  guildname_contains: String

  """All values not containing the given string."""
  guildname_not_contains: String

  """All values starting with the given string."""
  guildname_starts_with: String

  """All values not starting with the given string."""
  guildname_not_starts_with: String

  """All values ending with the given string."""
  guildname_ends_with: String

  """All values not ending with the given string."""
  guildname_not_ends_with: String
  guild_members_every: Guild_membersWhereInput
  guild_members_some: Guild_membersWhereInput
  guild_members_none: Guild_membersWhereInput
  owner: UsersWhereInput
}

input GuildsWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createGuild_members(data: Guild_membersCreateInput!): Guild_members!
  createGuilds(data: GuildsCreateInput!): Guilds!
  createUsers(data: UsersCreateInput!): Users!
  updateGuild_members(data: Guild_membersUpdateInput!, where: Guild_membersWhereUniqueInput!): Guild_members
  updateGuilds(data: GuildsUpdateInput!, where: GuildsWhereUniqueInput!): Guilds
  updateUsers(data: UsersUpdateInput!, where: UsersWhereUniqueInput!): Users
  deleteGuild_members(where: Guild_membersWhereUniqueInput!): Guild_members
  deleteGuilds(where: GuildsWhereUniqueInput!): Guilds
  deleteUsers(where: UsersWhereUniqueInput!): Users
  upsertGuild_members(where: Guild_membersWhereUniqueInput!, create: Guild_membersCreateInput!, update: Guild_membersUpdateInput!): Guild_members!
  upsertGuilds(where: GuildsWhereUniqueInput!, create: GuildsCreateInput!, update: GuildsUpdateInput!): Guilds!
  upsertUsers(where: UsersWhereUniqueInput!, create: UsersCreateInput!, update: UsersUpdateInput!): Users!
  updateManyGuild_memberses(data: Guild_membersUpdateInput!, where: Guild_membersWhereInput): BatchPayload!
  updateManyGuildses(data: GuildsUpdateInput!, where: GuildsWhereInput): BatchPayload!
  updateManyUserses(data: UsersUpdateInput!, where: UsersWhereInput): BatchPayload!
  deleteManyGuild_memberses(where: Guild_membersWhereInput): BatchPayload!
  deleteManyGuildses(where: GuildsWhereInput): BatchPayload!
  deleteManyUserses(where: UsersWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  guild_memberses(where: Guild_membersWhereInput, orderBy: Guild_membersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guild_members]!
  guildses(where: GuildsWhereInput, orderBy: GuildsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guilds]!
  userses(where: UsersWhereInput, orderBy: UsersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Users]!
  guild_members(where: Guild_membersWhereUniqueInput!): Guild_members
  guilds(where: GuildsWhereUniqueInput!): Guilds
  users(where: UsersWhereUniqueInput!): Users
  guild_membersesConnection(where: Guild_membersWhereInput, orderBy: Guild_membersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Guild_membersConnection!
  guildsesConnection(where: GuildsWhereInput, orderBy: GuildsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GuildsConnection!
  usersesConnection(where: UsersWhereInput, orderBy: UsersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsersConnection!
}

type Subscription {
  guild_members(where: Guild_membersSubscriptionWhereInput): Guild_membersSubscriptionPayload
  guilds(where: GuildsSubscriptionWhereInput): GuildsSubscriptionPayload
  users(where: UsersSubscriptionWhereInput): UsersSubscriptionPayload
}

type Users implements Node {
  id: ID!
  email: String!
  guild_members(where: Guild_membersWhereInput, orderBy: Guild_membersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guild_members!]
  guilds(where: GuildsWhereInput, orderBy: GuildsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guilds!]
  username: String!
}

"""A connection to a list of items."""
type UsersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UsersEdge]!
  aggregate: AggregateUsers!
}

input UsersCreateInput {
  email: String!
  username: String!
  guild_members: Guild_membersCreateManyWithoutUserInput
  guilds: GuildsCreateManyWithoutOwnerInput
}

input UsersCreateOneWithoutGuild_membersInput {
  create: UsersCreateWithoutGuild_membersInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutGuildsInput {
  create: UsersCreateWithoutGuildsInput
  connect: UsersWhereUniqueInput
}

input UsersCreateWithoutGuild_membersInput {
  email: String!
  username: String!
  guilds: GuildsCreateManyWithoutOwnerInput
}

input UsersCreateWithoutGuildsInput {
  email: String!
  username: String!
  guild_members: Guild_membersCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UsersEdge {
  """The item at the end of the edge."""
  node: Users!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UsersOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
}

type UsersPreviousValues {
  id: ID!
  email: String!
  username: String!
}

type UsersSubscriptionPayload {
  mutation: MutationType!
  node: Users
  updatedFields: [String!]
  previousValues: UsersPreviousValues
}

input UsersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UsersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UsersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UsersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UsersWhereInput
}

input UsersUpdateInput {
  email: String
  username: String
  guild_members: Guild_membersUpdateManyWithoutUserInput
  guilds: GuildsUpdateManyWithoutOwnerInput
}

input UsersUpdateOneWithoutGuild_membersInput {
  create: UsersCreateWithoutGuild_membersInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutGuild_membersDataInput
  upsert: UsersUpsertWithoutGuild_membersInput
}

input UsersUpdateOneWithoutGuildsInput {
  create: UsersCreateWithoutGuildsInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutGuildsDataInput
  upsert: UsersUpsertWithoutGuildsInput
}

input UsersUpdateWithoutGuild_membersDataInput {
  email: String
  username: String
  guilds: GuildsUpdateManyWithoutOwnerInput
}

input UsersUpdateWithoutGuildsDataInput {
  email: String
  username: String
  guild_members: Guild_membersUpdateManyWithoutUserInput
}

input UsersUpsertWithoutGuild_membersInput {
  update: UsersUpdateWithoutGuild_membersDataInput!
  create: UsersCreateWithoutGuild_membersInput!
}

input UsersUpsertWithoutGuildsInput {
  update: UsersUpdateWithoutGuildsDataInput!
  create: UsersCreateWithoutGuildsInput!
}

input UsersWhereInput {
  """Logical AND on all given filters."""
  AND: [UsersWhereInput!]

  """Logical OR on all given filters."""
  OR: [UsersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UsersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  guild_members_every: Guild_membersWhereInput
  guild_members_some: Guild_membersWhereInput
  guild_members_none: Guild_membersWhereInput
  guilds_every: GuildsWhereInput
  guilds_some: GuildsWhereInput
  guilds_none: GuildsWhereInput
}

input UsersWhereUniqueInput {
  id: ID
  email: String
  username: String
}
