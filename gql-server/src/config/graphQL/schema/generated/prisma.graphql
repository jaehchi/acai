# source: http://localhost:4466
# timestamp: Wed Oct 17 2018 18:33:43 GMT-0700 (Pacific Daylight Time)

type AggregateChannels {
  count: Int!
}

type AggregateGuilds {
  count: Int!
}

type AggregateMembers {
  count: Int!
}

type AggregateUsers {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Channels implements Node {
  id: ID!
  channelname: String!
  belongsTo(where: GuildsWhereInput): Guilds
  type: Int!
}

"""A connection to a list of items."""
type ChannelsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChannelsEdge]!
  aggregate: AggregateChannels!
}

input ChannelsCreateInput {
  channelname: String!
  type: Int!
  belongsTo: GuildsCreateOneWithoutChannelsInput
}

input ChannelsCreateManyWithoutBelongsToInput {
  create: [ChannelsCreateWithoutBelongsToInput!]
  connect: [ChannelsWhereUniqueInput!]
}

input ChannelsCreateWithoutBelongsToInput {
  channelname: String!
  type: Int!
}

"""An edge in a connection."""
type ChannelsEdge {
  """The item at the end of the edge."""
  node: Channels!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChannelsOrderByInput {
  id_ASC
  id_DESC
  channelname_ASC
  channelname_DESC
  type_ASC
  type_DESC
}

type ChannelsPreviousValues {
  id: ID!
  channelname: String!
  type: Int!
}

type ChannelsSubscriptionPayload {
  mutation: MutationType!
  node: Channels
  updatedFields: [String!]
  previousValues: ChannelsPreviousValues
}

input ChannelsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChannelsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChannelsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChannelsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChannelsWhereInput
}

input ChannelsUpdateInput {
  channelname: String
  type: Int
  belongsTo: GuildsUpdateOneWithoutChannelsInput
}

input ChannelsUpdateManyWithoutBelongsToInput {
  create: [ChannelsCreateWithoutBelongsToInput!]
  connect: [ChannelsWhereUniqueInput!]
  disconnect: [ChannelsWhereUniqueInput!]
  delete: [ChannelsWhereUniqueInput!]
  update: [ChannelsUpdateWithWhereUniqueWithoutBelongsToInput!]
  upsert: [ChannelsUpsertWithWhereUniqueWithoutBelongsToInput!]
}

input ChannelsUpdateWithoutBelongsToDataInput {
  channelname: String
  type: Int
}

input ChannelsUpdateWithWhereUniqueWithoutBelongsToInput {
  where: ChannelsWhereUniqueInput!
  data: ChannelsUpdateWithoutBelongsToDataInput!
}

input ChannelsUpsertWithWhereUniqueWithoutBelongsToInput {
  where: ChannelsWhereUniqueInput!
  update: ChannelsUpdateWithoutBelongsToDataInput!
  create: ChannelsCreateWithoutBelongsToInput!
}

input ChannelsWhereInput {
  """Logical AND on all given filters."""
  AND: [ChannelsWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChannelsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChannelsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  channelname: String

  """All values that are not equal to given value."""
  channelname_not: String

  """All values that are contained in given list."""
  channelname_in: [String!]

  """All values that are not contained in given list."""
  channelname_not_in: [String!]

  """All values less than the given value."""
  channelname_lt: String

  """All values less than or equal the given value."""
  channelname_lte: String

  """All values greater than the given value."""
  channelname_gt: String

  """All values greater than or equal the given value."""
  channelname_gte: String

  """All values containing the given string."""
  channelname_contains: String

  """All values not containing the given string."""
  channelname_not_contains: String

  """All values starting with the given string."""
  channelname_starts_with: String

  """All values not starting with the given string."""
  channelname_not_starts_with: String

  """All values ending with the given string."""
  channelname_ends_with: String

  """All values not ending with the given string."""
  channelname_not_ends_with: String
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  belongsTo: GuildsWhereInput
}

input ChannelsWhereUniqueInput {
  id: ID
}

type Guilds implements Node {
  id: ID!
  guildname: String!
  owner(where: UsersWhereInput): Users
  channels(where: ChannelsWhereInput, orderBy: ChannelsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channels!]
  members(where: MembersWhereInput, orderBy: MembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Members!]
}

"""A connection to a list of items."""
type GuildsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GuildsEdge]!
  aggregate: AggregateGuilds!
}

input GuildsCreateInput {
  guildname: String!
  owner: UsersCreateOneWithoutOwnerOfInput
  channels: ChannelsCreateManyWithoutBelongsToInput
  members: MembersCreateManyWithoutGuildsInput
}

input GuildsCreateManyWithoutOwnerInput {
  create: [GuildsCreateWithoutOwnerInput!]
  connect: [GuildsWhereUniqueInput!]
}

input GuildsCreateOneWithoutChannelsInput {
  create: GuildsCreateWithoutChannelsInput
  connect: GuildsWhereUniqueInput
}

input GuildsCreateOneWithoutMembersInput {
  create: GuildsCreateWithoutMembersInput
  connect: GuildsWhereUniqueInput
}

input GuildsCreateWithoutChannelsInput {
  guildname: String!
  owner: UsersCreateOneWithoutOwnerOfInput
  members: MembersCreateManyWithoutGuildsInput
}

input GuildsCreateWithoutMembersInput {
  guildname: String!
  owner: UsersCreateOneWithoutOwnerOfInput
  channels: ChannelsCreateManyWithoutBelongsToInput
}

input GuildsCreateWithoutOwnerInput {
  guildname: String!
  channels: ChannelsCreateManyWithoutBelongsToInput
  members: MembersCreateManyWithoutGuildsInput
}

"""An edge in a connection."""
type GuildsEdge {
  """The item at the end of the edge."""
  node: Guilds!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GuildsOrderByInput {
  id_ASC
  id_DESC
  guildname_ASC
  guildname_DESC
}

type GuildsPreviousValues {
  id: ID!
  guildname: String!
}

type GuildsSubscriptionPayload {
  mutation: MutationType!
  node: Guilds
  updatedFields: [String!]
  previousValues: GuildsPreviousValues
}

input GuildsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GuildsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuildsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuildsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GuildsWhereInput
}

input GuildsUpdateInput {
  guildname: String
  owner: UsersUpdateOneWithoutOwnerOfInput
  channels: ChannelsUpdateManyWithoutBelongsToInput
  members: MembersUpdateManyWithoutGuildsInput
}

input GuildsUpdateManyWithoutOwnerInput {
  create: [GuildsCreateWithoutOwnerInput!]
  connect: [GuildsWhereUniqueInput!]
  disconnect: [GuildsWhereUniqueInput!]
  delete: [GuildsWhereUniqueInput!]
  update: [GuildsUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [GuildsUpsertWithWhereUniqueWithoutOwnerInput!]
}

input GuildsUpdateOneWithoutChannelsInput {
  create: GuildsCreateWithoutChannelsInput
  connect: GuildsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GuildsUpdateWithoutChannelsDataInput
  upsert: GuildsUpsertWithoutChannelsInput
}

input GuildsUpdateOneWithoutMembersInput {
  create: GuildsCreateWithoutMembersInput
  connect: GuildsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GuildsUpdateWithoutMembersDataInput
  upsert: GuildsUpsertWithoutMembersInput
}

input GuildsUpdateWithoutChannelsDataInput {
  guildname: String
  owner: UsersUpdateOneWithoutOwnerOfInput
  members: MembersUpdateManyWithoutGuildsInput
}

input GuildsUpdateWithoutMembersDataInput {
  guildname: String
  owner: UsersUpdateOneWithoutOwnerOfInput
  channels: ChannelsUpdateManyWithoutBelongsToInput
}

input GuildsUpdateWithoutOwnerDataInput {
  guildname: String
  channels: ChannelsUpdateManyWithoutBelongsToInput
  members: MembersUpdateManyWithoutGuildsInput
}

input GuildsUpdateWithWhereUniqueWithoutOwnerInput {
  where: GuildsWhereUniqueInput!
  data: GuildsUpdateWithoutOwnerDataInput!
}

input GuildsUpsertWithoutChannelsInput {
  update: GuildsUpdateWithoutChannelsDataInput!
  create: GuildsCreateWithoutChannelsInput!
}

input GuildsUpsertWithoutMembersInput {
  update: GuildsUpdateWithoutMembersDataInput!
  create: GuildsCreateWithoutMembersInput!
}

input GuildsUpsertWithWhereUniqueWithoutOwnerInput {
  where: GuildsWhereUniqueInput!
  update: GuildsUpdateWithoutOwnerDataInput!
  create: GuildsCreateWithoutOwnerInput!
}

input GuildsWhereInput {
  """Logical AND on all given filters."""
  AND: [GuildsWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuildsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuildsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  guildname: String

  """All values that are not equal to given value."""
  guildname_not: String

  """All values that are contained in given list."""
  guildname_in: [String!]

  """All values that are not contained in given list."""
  guildname_not_in: [String!]

  """All values less than the given value."""
  guildname_lt: String

  """All values less than or equal the given value."""
  guildname_lte: String

  """All values greater than the given value."""
  guildname_gt: String

  """All values greater than or equal the given value."""
  guildname_gte: String

  """All values containing the given string."""
  guildname_contains: String

  """All values not containing the given string."""
  guildname_not_contains: String

  """All values starting with the given string."""
  guildname_starts_with: String

  """All values not starting with the given string."""
  guildname_not_starts_with: String

  """All values ending with the given string."""
  guildname_ends_with: String

  """All values not ending with the given string."""
  guildname_not_ends_with: String
  owner: UsersWhereInput
  channels_every: ChannelsWhereInput
  channels_some: ChannelsWhereInput
  channels_none: ChannelsWhereInput
  members_every: MembersWhereInput
  members_some: MembersWhereInput
  members_none: MembersWhereInput
}

input GuildsWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Members implements Node {
  id: ID!
  guilds(where: GuildsWhereInput): Guilds
  users(where: UsersWhereInput): Users
}

"""A connection to a list of items."""
type MembersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MembersEdge]!
  aggregate: AggregateMembers!
}

input MembersCreateInput {
  guilds: GuildsCreateOneWithoutMembersInput
  users: UsersCreateOneWithoutMemberOfInput
}

input MembersCreateManyWithoutGuildsInput {
  create: [MembersCreateWithoutGuildsInput!]
  connect: [MembersWhereUniqueInput!]
}

input MembersCreateManyWithoutUsersInput {
  create: [MembersCreateWithoutUsersInput!]
  connect: [MembersWhereUniqueInput!]
}

input MembersCreateWithoutGuildsInput {
  users: UsersCreateOneWithoutMemberOfInput
}

input MembersCreateWithoutUsersInput {
  guilds: GuildsCreateOneWithoutMembersInput
}

"""An edge in a connection."""
type MembersEdge {
  """The item at the end of the edge."""
  node: Members!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MembersOrderByInput {
  id_ASC
  id_DESC
}

type MembersPreviousValues {
  id: ID!
}

type MembersSubscriptionPayload {
  mutation: MutationType!
  node: Members
  updatedFields: [String!]
  previousValues: MembersPreviousValues
}

input MembersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MembersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MembersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MembersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MembersWhereInput
}

input MembersUpdateInput {
  guilds: GuildsUpdateOneWithoutMembersInput
  users: UsersUpdateOneWithoutMemberOfInput
}

input MembersUpdateManyWithoutGuildsInput {
  create: [MembersCreateWithoutGuildsInput!]
  connect: [MembersWhereUniqueInput!]
  disconnect: [MembersWhereUniqueInput!]
  delete: [MembersWhereUniqueInput!]
  update: [MembersUpdateWithWhereUniqueWithoutGuildsInput!]
  upsert: [MembersUpsertWithWhereUniqueWithoutGuildsInput!]
}

input MembersUpdateManyWithoutUsersInput {
  create: [MembersCreateWithoutUsersInput!]
  connect: [MembersWhereUniqueInput!]
  disconnect: [MembersWhereUniqueInput!]
  delete: [MembersWhereUniqueInput!]
  update: [MembersUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [MembersUpsertWithWhereUniqueWithoutUsersInput!]
}

input MembersUpdateWithoutGuildsDataInput {
  users: UsersUpdateOneWithoutMemberOfInput
}

input MembersUpdateWithoutUsersDataInput {
  guilds: GuildsUpdateOneWithoutMembersInput
}

input MembersUpdateWithWhereUniqueWithoutGuildsInput {
  where: MembersWhereUniqueInput!
  data: MembersUpdateWithoutGuildsDataInput!
}

input MembersUpdateWithWhereUniqueWithoutUsersInput {
  where: MembersWhereUniqueInput!
  data: MembersUpdateWithoutUsersDataInput!
}

input MembersUpsertWithWhereUniqueWithoutGuildsInput {
  where: MembersWhereUniqueInput!
  update: MembersUpdateWithoutGuildsDataInput!
  create: MembersCreateWithoutGuildsInput!
}

input MembersUpsertWithWhereUniqueWithoutUsersInput {
  where: MembersWhereUniqueInput!
  update: MembersUpdateWithoutUsersDataInput!
  create: MembersCreateWithoutUsersInput!
}

input MembersWhereInput {
  """Logical AND on all given filters."""
  AND: [MembersWhereInput!]

  """Logical OR on all given filters."""
  OR: [MembersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MembersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  guilds: GuildsWhereInput
  users: UsersWhereInput
}

input MembersWhereUniqueInput {
  id: ID
}

type Mutation {
  createChannels(data: ChannelsCreateInput!): Channels!
  createGuilds(data: GuildsCreateInput!): Guilds!
  createMembers(data: MembersCreateInput!): Members!
  createUsers(data: UsersCreateInput!): Users!
  updateChannels(data: ChannelsUpdateInput!, where: ChannelsWhereUniqueInput!): Channels
  updateGuilds(data: GuildsUpdateInput!, where: GuildsWhereUniqueInput!): Guilds
  updateMembers(data: MembersUpdateInput!, where: MembersWhereUniqueInput!): Members
  updateUsers(data: UsersUpdateInput!, where: UsersWhereUniqueInput!): Users
  deleteChannels(where: ChannelsWhereUniqueInput!): Channels
  deleteGuilds(where: GuildsWhereUniqueInput!): Guilds
  deleteMembers(where: MembersWhereUniqueInput!): Members
  deleteUsers(where: UsersWhereUniqueInput!): Users
  upsertChannels(where: ChannelsWhereUniqueInput!, create: ChannelsCreateInput!, update: ChannelsUpdateInput!): Channels!
  upsertGuilds(where: GuildsWhereUniqueInput!, create: GuildsCreateInput!, update: GuildsUpdateInput!): Guilds!
  upsertMembers(where: MembersWhereUniqueInput!, create: MembersCreateInput!, update: MembersUpdateInput!): Members!
  upsertUsers(where: UsersWhereUniqueInput!, create: UsersCreateInput!, update: UsersUpdateInput!): Users!
  updateManyChannelses(data: ChannelsUpdateInput!, where: ChannelsWhereInput): BatchPayload!
  updateManyGuildses(data: GuildsUpdateInput!, where: GuildsWhereInput): BatchPayload!
  updateManyMemberses(data: MembersUpdateInput!, where: MembersWhereInput): BatchPayload!
  updateManyUserses(data: UsersUpdateInput!, where: UsersWhereInput): BatchPayload!
  deleteManyChannelses(where: ChannelsWhereInput): BatchPayload!
  deleteManyGuildses(where: GuildsWhereInput): BatchPayload!
  deleteManyMemberses(where: MembersWhereInput): BatchPayload!
  deleteManyUserses(where: UsersWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  channelses(where: ChannelsWhereInput, orderBy: ChannelsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channels]!
  guildses(where: GuildsWhereInput, orderBy: GuildsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guilds]!
  memberses(where: MembersWhereInput, orderBy: MembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Members]!
  userses(where: UsersWhereInput, orderBy: UsersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Users]!
  channels(where: ChannelsWhereUniqueInput!): Channels
  guilds(where: GuildsWhereUniqueInput!): Guilds
  members(where: MembersWhereUniqueInput!): Members
  users(where: UsersWhereUniqueInput!): Users
  channelsesConnection(where: ChannelsWhereInput, orderBy: ChannelsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelsConnection!
  guildsesConnection(where: GuildsWhereInput, orderBy: GuildsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GuildsConnection!
  membersesConnection(where: MembersWhereInput, orderBy: MembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MembersConnection!
  usersesConnection(where: UsersWhereInput, orderBy: UsersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsersConnection!
}

type Subscription {
  channels(where: ChannelsSubscriptionWhereInput): ChannelsSubscriptionPayload
  guilds(where: GuildsSubscriptionWhereInput): GuildsSubscriptionPayload
  members(where: MembersSubscriptionWhereInput): MembersSubscriptionPayload
  users(where: UsersSubscriptionWhereInput): UsersSubscriptionPayload
}

type Users implements Node {
  id: ID!
  email: String!
  username: String!
  ownerOf(where: GuildsWhereInput, orderBy: GuildsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guilds!]
  memberOf(where: MembersWhereInput, orderBy: MembersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Members!]
}

"""A connection to a list of items."""
type UsersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UsersEdge]!
  aggregate: AggregateUsers!
}

input UsersCreateInput {
  email: String!
  username: String!
  ownerOf: GuildsCreateManyWithoutOwnerInput
  memberOf: MembersCreateManyWithoutUsersInput
}

input UsersCreateOneWithoutMemberOfInput {
  create: UsersCreateWithoutMemberOfInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutOwnerOfInput {
  create: UsersCreateWithoutOwnerOfInput
  connect: UsersWhereUniqueInput
}

input UsersCreateWithoutMemberOfInput {
  email: String!
  username: String!
  ownerOf: GuildsCreateManyWithoutOwnerInput
}

input UsersCreateWithoutOwnerOfInput {
  email: String!
  username: String!
  memberOf: MembersCreateManyWithoutUsersInput
}

"""An edge in a connection."""
type UsersEdge {
  """The item at the end of the edge."""
  node: Users!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UsersOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
}

type UsersPreviousValues {
  id: ID!
  email: String!
  username: String!
}

type UsersSubscriptionPayload {
  mutation: MutationType!
  node: Users
  updatedFields: [String!]
  previousValues: UsersPreviousValues
}

input UsersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UsersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UsersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UsersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UsersWhereInput
}

input UsersUpdateInput {
  email: String
  username: String
  ownerOf: GuildsUpdateManyWithoutOwnerInput
  memberOf: MembersUpdateManyWithoutUsersInput
}

input UsersUpdateOneWithoutMemberOfInput {
  create: UsersCreateWithoutMemberOfInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutMemberOfDataInput
  upsert: UsersUpsertWithoutMemberOfInput
}

input UsersUpdateOneWithoutOwnerOfInput {
  create: UsersCreateWithoutOwnerOfInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutOwnerOfDataInput
  upsert: UsersUpsertWithoutOwnerOfInput
}

input UsersUpdateWithoutMemberOfDataInput {
  email: String
  username: String
  ownerOf: GuildsUpdateManyWithoutOwnerInput
}

input UsersUpdateWithoutOwnerOfDataInput {
  email: String
  username: String
  memberOf: MembersUpdateManyWithoutUsersInput
}

input UsersUpsertWithoutMemberOfInput {
  update: UsersUpdateWithoutMemberOfDataInput!
  create: UsersCreateWithoutMemberOfInput!
}

input UsersUpsertWithoutOwnerOfInput {
  update: UsersUpdateWithoutOwnerOfDataInput!
  create: UsersCreateWithoutOwnerOfInput!
}

input UsersWhereInput {
  """Logical AND on all given filters."""
  AND: [UsersWhereInput!]

  """Logical OR on all given filters."""
  OR: [UsersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UsersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  ownerOf_every: GuildsWhereInput
  ownerOf_some: GuildsWhereInput
  ownerOf_none: GuildsWhereInput
  memberOf_every: MembersWhereInput
  memberOf_some: MembersWhereInput
  memberOf_none: MembersWhereInput
}

input UsersWhereUniqueInput {
  id: ID
  email: String
  username: String
}
