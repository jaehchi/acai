// Code generated by Prisma (prisma@1.21.0-alpha.39). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  channel: (where?: ChannelWhereInput) => Promise<boolean>;
  guild: (where?: GuildWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  channel: (where: ChannelWhereUniqueInput) => Channel;
  channels: (
    args?: {
      where?: ChannelWhereInput;
      orderBy?: ChannelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Channel>;
  channelsConnection: (
    args?: {
      where?: ChannelWhereInput;
      orderBy?: ChannelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChannelConnection;
  guild: (where: GuildWhereUniqueInput) => Guild;
  guilds: (
    args?: {
      where?: GuildWhereInput;
      orderBy?: GuildOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Guild>;
  guildsConnection: (
    args?: {
      where?: GuildWhereInput;
      orderBy?: GuildOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GuildConnection;
  message: (where: MessageWhereUniqueInput) => Message;
  messages: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Message>;
  messagesConnection: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MessageConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChannel: (data: ChannelCreateInput) => Channel;
  updateChannel: (
    args: { data: ChannelUpdateInput; where: ChannelWhereUniqueInput }
  ) => Channel;
  updateManyChannels: (
    args: { data: ChannelUpdateInput; where?: ChannelWhereInput }
  ) => BatchPayload;
  upsertChannel: (
    args: {
      where: ChannelWhereUniqueInput;
      create: ChannelCreateInput;
      update: ChannelUpdateInput;
    }
  ) => Channel;
  deleteChannel: (where: ChannelWhereUniqueInput) => Channel;
  deleteManyChannels: (where?: ChannelWhereInput) => BatchPayload;
  createGuild: (data: GuildCreateInput) => Guild;
  updateGuild: (
    args: { data: GuildUpdateInput; where: GuildWhereUniqueInput }
  ) => Guild;
  updateManyGuilds: (
    args: { data: GuildUpdateInput; where?: GuildWhereInput }
  ) => BatchPayload;
  upsertGuild: (
    args: {
      where: GuildWhereUniqueInput;
      create: GuildCreateInput;
      update: GuildUpdateInput;
    }
  ) => Guild;
  deleteGuild: (where: GuildWhereUniqueInput) => Guild;
  deleteManyGuilds: (where?: GuildWhereInput) => BatchPayload;
  createMessage: (data: MessageCreateInput) => Message;
  updateMessage: (
    args: { data: MessageUpdateInput; where: MessageWhereUniqueInput }
  ) => Message;
  updateManyMessages: (
    args: { data: MessageUpdateInput; where?: MessageWhereInput }
  ) => BatchPayload;
  upsertMessage: (
    args: {
      where: MessageWhereUniqueInput;
      create: MessageCreateInput;
      update: MessageUpdateInput;
    }
  ) => Message;
  deleteMessage: (where: MessageWhereUniqueInput) => Message;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  channel: (
    where?: ChannelSubscriptionWhereInput
  ) => ChannelSubscriptionPayloadSubscription;
  guild: (
    where?: GuildSubscriptionWhereInput
  ) => GuildSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GuildOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "guildname_ASC"
  | "guildname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ChannelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "channelname_ASC"
  | "channelname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GuildUpdateOneWithoutChannelsInput {
  create?: GuildCreateWithoutChannelsInput;
  update?: GuildUpdateWithoutChannelsDataInput;
  upsert?: GuildUpsertWithoutChannelsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GuildWhereUniqueInput;
}

export type ChannelWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GuildUpdateManyWithoutMembersInput {
  create?: GuildCreateWithoutMembersInput[] | GuildCreateWithoutMembersInput;
  delete?: GuildWhereUniqueInput[] | GuildWhereUniqueInput;
  connect?: GuildWhereUniqueInput[] | GuildWhereUniqueInput;
  disconnect?: GuildWhereUniqueInput[] | GuildWhereUniqueInput;
  update?:
    | GuildUpdateWithWhereUniqueWithoutMembersInput[]
    | GuildUpdateWithWhereUniqueWithoutMembersInput;
  upsert?:
    | GuildUpsertWithWhereUniqueWithoutMembersInput[]
    | GuildUpsertWithWhereUniqueWithoutMembersInput;
}

export interface GuildWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guildname?: String;
  guildname_not?: String;
  guildname_in?: String[] | String;
  guildname_not_in?: String[] | String;
  guildname_lt?: String;
  guildname_lte?: String;
  guildname_gt?: String;
  guildname_gte?: String;
  guildname_contains?: String;
  guildname_not_contains?: String;
  guildname_starts_with?: String;
  guildname_not_starts_with?: String;
  guildname_ends_with?: String;
  guildname_not_ends_with?: String;
  owner?: UserWhereInput;
  channels_every?: ChannelWhereInput;
  channels_some?: ChannelWhereInput;
  channels_none?: ChannelWhereInput;
  members_every?: UserWhereInput;
  members_some?: UserWhereInput;
  members_none?: UserWhereInput;
  AND?: GuildWhereInput[] | GuildWhereInput;
  OR?: GuildWhereInput[] | GuildWhereInput;
  NOT?: GuildWhereInput[] | GuildWhereInput;
}

export interface GuildUpdateWithWhereUniqueWithoutMembersInput {
  where: GuildWhereUniqueInput;
  data: GuildUpdateWithoutMembersDataInput;
}

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: UserWhereInput;
  channel?: ChannelWhereInput;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export interface GuildCreateManyWithoutOwnerInput {
  create?: GuildCreateWithoutOwnerInput[] | GuildCreateWithoutOwnerInput;
  connect?: GuildWhereUniqueInput[] | GuildWhereUniqueInput;
}

export interface ChannelUpsertWithoutMessagesInput {
  update: ChannelUpdateWithoutMessagesDataInput;
  create: ChannelCreateWithoutMessagesInput;
}

export interface GuildCreateWithoutOwnerInput {
  guildname: String;
  channels?: ChannelCreateManyWithoutBelongsToInput;
  members?: UserCreateManyWithoutMemberOfInput;
}

export interface GuildUpdateWithoutMembersDataInput {
  guildname?: String;
  owner?: UserUpdateOneWithoutOwnerOfInput;
  channels?: ChannelUpdateManyWithoutBelongsToInput;
}

export interface UserCreateManyWithoutMemberOfInput {
  create?: UserCreateWithoutMemberOfInput[] | UserCreateWithoutMemberOfInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface UserCreateWithoutMemberOfInput {
  email: String;
  username: String;
  password: String;
  ownerOf?: GuildCreateManyWithoutOwnerInput;
  messages?: MessageCreateManyWithoutAuthorInput;
}

export interface ChannelSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChannelWhereInput;
  AND?: ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput;
  OR?: ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput;
  NOT?: ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput;
}

export interface MessageCreateManyWithoutAuthorInput {
  create?: MessageCreateWithoutAuthorInput[] | MessageCreateWithoutAuthorInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  username: String;
  password: String;
  ownerOf?: GuildCreateManyWithoutOwnerInput;
  memberOf?: GuildCreateManyWithoutMembersInput;
  messages?: MessageCreateManyWithoutAuthorInput;
}

export interface MessageCreateWithoutAuthorInput {
  content: String;
  channel?: ChannelCreateOneWithoutMessagesInput;
}

export interface MessageCreateInput {
  content: String;
  author?: UserCreateOneWithoutMessagesInput;
  channel?: ChannelCreateOneWithoutMessagesInput;
}

export interface ChannelCreateOneWithoutMessagesInput {
  create?: ChannelCreateWithoutMessagesInput;
  connect?: ChannelWhereUniqueInput;
}

export interface GuildUpdateInput {
  guildname?: String;
  owner?: UserUpdateOneWithoutOwnerOfInput;
  channels?: ChannelUpdateManyWithoutBelongsToInput;
  members?: UserUpdateManyWithoutMemberOfInput;
}

export interface ChannelCreateWithoutMessagesInput {
  type: Int;
  channelname: String;
  belongsTo?: GuildCreateOneWithoutChannelsInput;
}

export interface GuildUpsertWithoutChannelsInput {
  update: GuildUpdateWithoutChannelsDataInput;
  create: GuildCreateWithoutChannelsInput;
}

export interface ChannelUpdateInput {
  type?: Int;
  channelname?: String;
  belongsTo?: GuildUpdateOneWithoutChannelsInput;
  messages?: MessageUpdateManyWithoutChannelInput;
}

export interface UserUpsertWithoutOwnerOfInput {
  update: UserUpdateWithoutOwnerOfDataInput;
  create: UserCreateWithoutOwnerOfInput;
}

export interface UserUpsertWithWhereUniqueWithoutMemberOfInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMemberOfDataInput;
  create: UserCreateWithoutMemberOfInput;
}

export interface ChannelUpsertWithWhereUniqueWithoutBelongsToInput {
  where: ChannelWhereUniqueInput;
  update: ChannelUpdateWithoutBelongsToDataInput;
  create: ChannelCreateWithoutBelongsToInput;
}

export interface GuildUpdateWithoutChannelsDataInput {
  guildname?: String;
  owner?: UserUpdateOneWithoutOwnerOfInput;
  members?: UserUpdateManyWithoutMemberOfInput;
}

export interface MessageUpsertWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutChannelDataInput;
  create: MessageCreateWithoutChannelInput;
}

export interface UserUpdateOneWithoutOwnerOfInput {
  create?: UserCreateWithoutOwnerOfInput;
  update?: UserUpdateWithoutOwnerOfDataInput;
  upsert?: UserUpsertWithoutOwnerOfInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface GuildUpsertWithWhereUniqueWithoutOwnerInput {
  where: GuildWhereUniqueInput;
  update: GuildUpdateWithoutOwnerDataInput;
  create: GuildCreateWithoutOwnerInput;
}

export interface UserUpdateWithoutOwnerOfDataInput {
  email?: String;
  username?: String;
  password?: String;
  memberOf?: GuildUpdateManyWithoutMembersInput;
  messages?: MessageUpdateManyWithoutAuthorInput;
}

export interface ChannelCreateInput {
  type: Int;
  channelname: String;
  belongsTo?: GuildCreateOneWithoutChannelsInput;
  messages?: MessageCreateManyWithoutChannelInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  ownerOf_every?: GuildWhereInput;
  ownerOf_some?: GuildWhereInput;
  ownerOf_none?: GuildWhereInput;
  memberOf_every?: GuildWhereInput;
  memberOf_some?: GuildWhereInput;
  memberOf_none?: GuildWhereInput;
  messages_every?: MessageWhereInput;
  messages_some?: MessageWhereInput;
  messages_none?: MessageWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface GuildCreateWithoutChannelsInput {
  guildname: String;
  owner?: UserCreateOneWithoutOwnerOfInput;
  members?: UserCreateManyWithoutMemberOfInput;
}

export interface ChannelWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  channelname?: String;
  channelname_not?: String;
  channelname_in?: String[] | String;
  channelname_not_in?: String[] | String;
  channelname_lt?: String;
  channelname_lte?: String;
  channelname_gt?: String;
  channelname_gte?: String;
  channelname_contains?: String;
  channelname_not_contains?: String;
  channelname_starts_with?: String;
  channelname_not_starts_with?: String;
  channelname_ends_with?: String;
  channelname_not_ends_with?: String;
  belongsTo?: GuildWhereInput;
  messages_every?: MessageWhereInput;
  messages_some?: MessageWhereInput;
  messages_none?: MessageWhereInput;
  AND?: ChannelWhereInput[] | ChannelWhereInput;
  OR?: ChannelWhereInput[] | ChannelWhereInput;
  NOT?: ChannelWhereInput[] | ChannelWhereInput;
}

export interface UserCreateWithoutOwnerOfInput {
  email: String;
  username: String;
  password: String;
  memberOf?: GuildCreateManyWithoutMembersInput;
  messages?: MessageCreateManyWithoutAuthorInput;
}

export interface MessageUpsertWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutAuthorDataInput;
  create: MessageCreateWithoutAuthorInput;
}

export interface GuildCreateWithoutMembersInput {
  guildname: String;
  owner?: UserCreateOneWithoutOwnerOfInput;
  channels?: ChannelCreateManyWithoutBelongsToInput;
}

export interface ChannelUpdateManyWithoutBelongsToInput {
  create?:
    | ChannelCreateWithoutBelongsToInput[]
    | ChannelCreateWithoutBelongsToInput;
  delete?: ChannelWhereUniqueInput[] | ChannelWhereUniqueInput;
  connect?: ChannelWhereUniqueInput[] | ChannelWhereUniqueInput;
  disconnect?: ChannelWhereUniqueInput[] | ChannelWhereUniqueInput;
  update?:
    | ChannelUpdateWithWhereUniqueWithoutBelongsToInput[]
    | ChannelUpdateWithWhereUniqueWithoutBelongsToInput;
  upsert?:
    | ChannelUpsertWithWhereUniqueWithoutBelongsToInput[]
    | ChannelUpsertWithWhereUniqueWithoutBelongsToInput;
}

export interface ChannelCreateWithoutBelongsToInput {
  type: Int;
  channelname: String;
  messages?: MessageCreateManyWithoutChannelInput;
}

export interface ChannelUpdateWithWhereUniqueWithoutBelongsToInput {
  where: ChannelWhereUniqueInput;
  data: ChannelUpdateWithoutBelongsToDataInput;
}

export interface MessageCreateWithoutChannelInput {
  content: String;
  author?: UserCreateOneWithoutMessagesInput;
}

export interface ChannelUpdateWithoutBelongsToDataInput {
  type?: Int;
  channelname?: String;
  messages?: MessageUpdateManyWithoutChannelInput;
}

export interface UserCreateWithoutMessagesInput {
  email: String;
  username: String;
  password: String;
  ownerOf?: GuildCreateManyWithoutOwnerInput;
  memberOf?: GuildCreateManyWithoutMembersInput;
}

export interface MessageUpdateManyWithoutChannelInput {
  create?:
    | MessageCreateWithoutChannelInput[]
    | MessageCreateWithoutChannelInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutChannelInput[]
    | MessageUpdateWithWhereUniqueWithoutChannelInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutChannelInput[]
    | MessageUpsertWithWhereUniqueWithoutChannelInput;
}

export interface GuildSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GuildWhereInput;
  AND?: GuildSubscriptionWhereInput[] | GuildSubscriptionWhereInput;
  OR?: GuildSubscriptionWhereInput[] | GuildSubscriptionWhereInput;
  NOT?: GuildSubscriptionWhereInput[] | GuildSubscriptionWhereInput;
}

export interface MessageUpdateWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutChannelDataInput;
}

export interface MessageUpdateInput {
  content?: String;
  author?: UserUpdateOneWithoutMessagesInput;
  channel?: ChannelUpdateOneWithoutMessagesInput;
}

export interface MessageUpdateWithoutChannelDataInput {
  content?: String;
  author?: UserUpdateOneWithoutMessagesInput;
}

export interface GuildCreateInput {
  guildname: String;
  owner?: UserCreateOneWithoutOwnerOfInput;
  channels?: ChannelCreateManyWithoutBelongsToInput;
  members?: UserCreateManyWithoutMemberOfInput;
}

export interface UserUpdateOneWithoutMessagesInput {
  create?: UserCreateWithoutMessagesInput;
  update?: UserUpdateWithoutMessagesDataInput;
  upsert?: UserUpsertWithoutMessagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface GuildUpsertWithWhereUniqueWithoutMembersInput {
  where: GuildWhereUniqueInput;
  update: GuildUpdateWithoutMembersDataInput;
  create: GuildCreateWithoutMembersInput;
}

export interface UserUpdateWithoutMessagesDataInput {
  email?: String;
  username?: String;
  password?: String;
  ownerOf?: GuildUpdateManyWithoutOwnerInput;
  memberOf?: GuildUpdateManyWithoutMembersInput;
}

export interface UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput;
  create: UserCreateWithoutMessagesInput;
}

export interface GuildUpdateManyWithoutOwnerInput {
  create?: GuildCreateWithoutOwnerInput[] | GuildCreateWithoutOwnerInput;
  delete?: GuildWhereUniqueInput[] | GuildWhereUniqueInput;
  connect?: GuildWhereUniqueInput[] | GuildWhereUniqueInput;
  disconnect?: GuildWhereUniqueInput[] | GuildWhereUniqueInput;
  update?:
    | GuildUpdateWithWhereUniqueWithoutOwnerInput[]
    | GuildUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | GuildUpsertWithWhereUniqueWithoutOwnerInput[]
    | GuildUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface GuildCreateOneWithoutChannelsInput {
  create?: GuildCreateWithoutChannelsInput;
  connect?: GuildWhereUniqueInput;
}

export interface GuildUpdateWithWhereUniqueWithoutOwnerInput {
  where: GuildWhereUniqueInput;
  data: GuildUpdateWithoutOwnerDataInput;
}

export interface GuildCreateManyWithoutMembersInput {
  create?: GuildCreateWithoutMembersInput[] | GuildCreateWithoutMembersInput;
  connect?: GuildWhereUniqueInput[] | GuildWhereUniqueInput;
}

export interface GuildUpdateWithoutOwnerDataInput {
  guildname?: String;
  channels?: ChannelUpdateManyWithoutBelongsToInput;
  members?: UserUpdateManyWithoutMemberOfInput;
}

export interface MessageCreateManyWithoutChannelInput {
  create?:
    | MessageCreateWithoutChannelInput[]
    | MessageCreateWithoutChannelInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface UserUpdateManyWithoutMemberOfInput {
  create?: UserCreateWithoutMemberOfInput[] | UserCreateWithoutMemberOfInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutMemberOfInput[]
    | UserUpdateWithWhereUniqueWithoutMemberOfInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutMemberOfInput[]
    | UserUpsertWithWhereUniqueWithoutMemberOfInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutMemberOfInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMemberOfDataInput;
}

export type GuildWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutMemberOfDataInput {
  email?: String;
  username?: String;
  password?: String;
  ownerOf?: GuildUpdateManyWithoutOwnerInput;
  messages?: MessageUpdateManyWithoutAuthorInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  username?: String;
}>;

export interface MessageUpdateManyWithoutAuthorInput {
  create?: MessageCreateWithoutAuthorInput[] | MessageCreateWithoutAuthorInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutAuthorInput[]
    | MessageUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutAuthorInput[]
    | MessageUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface UserCreateOneWithoutOwnerOfInput {
  create?: UserCreateWithoutOwnerOfInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateOneWithoutMessagesInput {
  create?: UserCreateWithoutMessagesInput;
  connect?: UserWhereUniqueInput;
}

export interface ChannelUpdateWithoutMessagesDataInput {
  type?: Int;
  channelname?: String;
  belongsTo?: GuildUpdateOneWithoutChannelsInput;
}

export interface ChannelUpdateOneWithoutMessagesInput {
  create?: ChannelCreateWithoutMessagesInput;
  update?: ChannelUpdateWithoutMessagesDataInput;
  upsert?: ChannelUpsertWithoutMessagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ChannelWhereUniqueInput;
}

export interface MessageUpdateWithoutAuthorDataInput {
  content?: String;
  channel?: ChannelUpdateOneWithoutMessagesInput;
}

export interface MessageUpdateWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutAuthorDataInput;
}

export interface UserUpdateInput {
  email?: String;
  username?: String;
  password?: String;
  ownerOf?: GuildUpdateManyWithoutOwnerInput;
  memberOf?: GuildUpdateManyWithoutMembersInput;
  messages?: MessageUpdateManyWithoutAuthorInput;
}

export interface ChannelCreateManyWithoutBelongsToInput {
  create?:
    | ChannelCreateWithoutBelongsToInput[]
    | ChannelCreateWithoutBelongsToInput;
  connect?: ChannelWhereUniqueInput[] | ChannelWhereUniqueInput;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  username: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  username: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  ownerOf: <T = FragmentableArray<Guild>>(
    args?: {
      where?: GuildWhereInput;
      orderBy?: GuildOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  memberOf: <T = FragmentableArray<Guild>>(
    args?: {
      where?: GuildWhereInput;
      orderBy?: GuildOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = FragmentableArray<Message>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  ownerOf: <T = Promise<AsyncIterator<GuildSubscription>>>(
    args?: {
      where?: GuildWhereInput;
      orderBy?: GuildOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  memberOf: <T = Promise<AsyncIterator<GuildSubscription>>>(
    args?: {
      where?: GuildWhereInput;
      orderBy?: GuildOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Guild {
  id: ID_Output;
  guildname: String;
}

export interface GuildPromise extends Promise<Guild>, Fragmentable {
  id: () => Promise<ID_Output>;
  guildname: () => Promise<String>;
  owner: <T = User>() => T;
  channels: <T = FragmentableArray<Channel>>(
    args?: {
      where?: ChannelWhereInput;
      orderBy?: ChannelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  members: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GuildSubscription
  extends Promise<AsyncIterator<Guild>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guildname: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  channels: <T = Promise<AsyncIterator<ChannelSubscription>>>(
    args?: {
      where?: ChannelWhereInput;
      orderBy?: ChannelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChannelConnection {}

export interface ChannelConnectionPromise
  extends Promise<ChannelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ChannelEdge>>() => T;
  aggregate: <T = AggregateChannel>() => T;
}

export interface ChannelConnectionSubscription
  extends Promise<AsyncIterator<ChannelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChannelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChannelSubscription>() => T;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Channel {
  id: ID_Output;
  type: Int;
  channelname: String;
}

export interface ChannelPromise extends Promise<Channel>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
  channelname: () => Promise<String>;
  belongsTo: <T = Guild>() => T;
  messages: <T = FragmentableArray<Message>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ChannelSubscription
  extends Promise<AsyncIterator<Channel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
  channelname: () => Promise<AsyncIterator<String>>;
  belongsTo: <T = GuildSubscription>() => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MessageEdge {
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = Message>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChannelSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ChannelSubscriptionPayloadPromise
  extends Promise<ChannelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Channel>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChannelPreviousValues>() => T;
}

export interface ChannelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChannelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChannelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChannelPreviousValuesSubscription>() => T;
}

export interface AggregateGuild {
  count: Int;
}

export interface AggregateGuildPromise
  extends Promise<AggregateGuild>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuildSubscription
  extends Promise<AsyncIterator<AggregateGuild>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessage>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Message>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValues>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChannelPreviousValues {
  id: ID_Output;
  type: Int;
  channelname: String;
}

export interface ChannelPreviousValuesPromise
  extends Promise<ChannelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
  channelname: () => Promise<String>;
}

export interface ChannelPreviousValuesSubscription
  extends Promise<AsyncIterator<ChannelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
  channelname: () => Promise<AsyncIterator<String>>;
}

export interface GuildEdge {
  cursor: String;
}

export interface GuildEdgePromise extends Promise<GuildEdge>, Fragmentable {
  node: <T = Guild>() => T;
  cursor: () => Promise<String>;
}

export interface GuildEdgeSubscription
  extends Promise<AsyncIterator<GuildEdge>>,
    Fragmentable {
  node: <T = GuildSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChannel {
  count: Int;
}

export interface AggregateChannelPromise
  extends Promise<AggregateChannel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChannelSubscription
  extends Promise<AsyncIterator<AggregateChannel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  content: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface GuildPreviousValues {
  id: ID_Output;
  guildname: String;
}

export interface GuildPreviousValuesPromise
  extends Promise<GuildPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  guildname: () => Promise<String>;
}

export interface GuildPreviousValuesSubscription
  extends Promise<AsyncIterator<GuildPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guildname: () => Promise<AsyncIterator<String>>;
}

export interface GuildSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GuildSubscriptionPayloadPromise
  extends Promise<GuildSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Guild>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuildPreviousValues>() => T;
}

export interface GuildSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuildSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuildSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuildPreviousValuesSubscription>() => T;
}

export interface Message {
  id: ID_Output;
  content: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  author: <T = User>() => T;
  channel: <T = Channel>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  channel: <T = ChannelSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChannelEdge {
  cursor: String;
}

export interface ChannelEdgePromise extends Promise<ChannelEdge>, Fragmentable {
  node: <T = Channel>() => T;
  cursor: () => Promise<String>;
}

export interface ChannelEdgeSubscription
  extends Promise<AsyncIterator<ChannelEdge>>,
    Fragmentable {
  node: <T = ChannelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GuildConnection {}

export interface GuildConnectionPromise
  extends Promise<GuildConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<GuildEdge>>() => T;
  aggregate: <T = AggregateGuild>() => T;
}

export interface GuildConnectionSubscription
  extends Promise<AsyncIterator<GuildConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuildEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuildSubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
