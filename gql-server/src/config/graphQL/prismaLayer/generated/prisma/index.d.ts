// Code generated by Prisma (prisma@1.18.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  channels: (where?: ChannelsWhereInput) => Promise<boolean>;
  credentials: (where?: CredentialsWhereInput) => Promise<boolean>;
  guild_channels: (where?: Guild_channelsWhereInput) => Promise<boolean>;
  guild_members: (where?: Guild_membersWhereInput) => Promise<boolean>;
  guilds: (where?: GuildsWhereInput) => Promise<boolean>;
  messages: (where?: MessagesWhereInput) => Promise<boolean>;
  users: (where?: UsersWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  channels: (where: ChannelsWhereUniqueInput) => Channels;
  channelses: (
    args?: {
      where?: ChannelsWhereInput;
      orderBy?: ChannelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ChannelsNode>;
  channelsesConnection: (
    args?: {
      where?: ChannelsWhereInput;
      orderBy?: ChannelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChannelsConnection;
  credentials: (where: CredentialsWhereUniqueInput) => Credentials;
  credentialses: (
    args?: {
      where?: CredentialsWhereInput;
      orderBy?: CredentialsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CredentialsNode>;
  credentialsesConnection: (
    args?: {
      where?: CredentialsWhereInput;
      orderBy?: CredentialsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CredentialsConnection;
  guild_channels: (where: Guild_channelsWhereUniqueInput) => Guild_channels;
  guild_channelses: (
    args?: {
      where?: Guild_channelsWhereInput;
      orderBy?: Guild_channelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Guild_channelsNode>;
  guild_channelsesConnection: (
    args?: {
      where?: Guild_channelsWhereInput;
      orderBy?: Guild_channelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Guild_channelsConnection;
  guild_members: (where: Guild_membersWhereUniqueInput) => Guild_members;
  guild_memberses: (
    args?: {
      where?: Guild_membersWhereInput;
      orderBy?: Guild_membersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Guild_membersNode>;
  guild_membersesConnection: (
    args?: {
      where?: Guild_membersWhereInput;
      orderBy?: Guild_membersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Guild_membersConnection;
  guilds: (where: GuildsWhereUniqueInput) => Guilds;
  guildses: (
    args?: {
      where?: GuildsWhereInput;
      orderBy?: GuildsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GuildsNode>;
  guildsesConnection: (
    args?: {
      where?: GuildsWhereInput;
      orderBy?: GuildsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GuildsConnection;
  messages: (where: MessagesWhereUniqueInput) => Messages;
  messageses: (
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MessagesNode>;
  messagesesConnection: (
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MessagesConnection;
  users: (where: UsersWhereUniqueInput) => Users;
  userses: (
    args?: {
      where?: UsersWhereInput;
      orderBy?: UsersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UsersNode>;
  usersesConnection: (
    args?: {
      where?: UsersWhereInput;
      orderBy?: UsersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UsersConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChannels: (data: ChannelsCreateInput) => Channels;
  updateChannels: (
    args: { data: ChannelsUpdateInput; where: ChannelsWhereUniqueInput }
  ) => Channels;
  updateManyChannelses: (
    args: { data: ChannelsUpdateInput; where?: ChannelsWhereInput }
  ) => BatchPayload;
  upsertChannels: (
    args: {
      where: ChannelsWhereUniqueInput;
      create: ChannelsCreateInput;
      update: ChannelsUpdateInput;
    }
  ) => Channels;
  deleteChannels: (where: ChannelsWhereUniqueInput) => Channels;
  deleteManyChannelses: (where?: ChannelsWhereInput) => BatchPayload;
  createCredentials: (data: CredentialsCreateInput) => Credentials;
  updateCredentials: (
    args: { data: CredentialsUpdateInput; where: CredentialsWhereUniqueInput }
  ) => Credentials;
  updateManyCredentialses: (
    args: { data: CredentialsUpdateInput; where?: CredentialsWhereInput }
  ) => BatchPayload;
  upsertCredentials: (
    args: {
      where: CredentialsWhereUniqueInput;
      create: CredentialsCreateInput;
      update: CredentialsUpdateInput;
    }
  ) => Credentials;
  deleteCredentials: (where: CredentialsWhereUniqueInput) => Credentials;
  deleteManyCredentialses: (where?: CredentialsWhereInput) => BatchPayload;
  createGuild_channels: (data: Guild_channelsCreateInput) => Guild_channels;
  updateGuild_channels: (
    args: {
      data: Guild_channelsUpdateInput;
      where: Guild_channelsWhereUniqueInput;
    }
  ) => Guild_channels;
  updateManyGuild_channelses: (
    args: { data: Guild_channelsUpdateInput; where?: Guild_channelsWhereInput }
  ) => BatchPayload;
  upsertGuild_channels: (
    args: {
      where: Guild_channelsWhereUniqueInput;
      create: Guild_channelsCreateInput;
      update: Guild_channelsUpdateInput;
    }
  ) => Guild_channels;
  deleteGuild_channels: (
    where: Guild_channelsWhereUniqueInput
  ) => Guild_channels;
  deleteManyGuild_channelses: (
    where?: Guild_channelsWhereInput
  ) => BatchPayload;
  createGuild_members: (data: Guild_membersCreateInput) => Guild_members;
  updateGuild_members: (
    args: {
      data: Guild_membersUpdateInput;
      where: Guild_membersWhereUniqueInput;
    }
  ) => Guild_members;
  updateManyGuild_memberses: (
    args: { data: Guild_membersUpdateInput; where?: Guild_membersWhereInput }
  ) => BatchPayload;
  upsertGuild_members: (
    args: {
      where: Guild_membersWhereUniqueInput;
      create: Guild_membersCreateInput;
      update: Guild_membersUpdateInput;
    }
  ) => Guild_members;
  deleteGuild_members: (where: Guild_membersWhereUniqueInput) => Guild_members;
  deleteManyGuild_memberses: (where?: Guild_membersWhereInput) => BatchPayload;
  createGuilds: (data: GuildsCreateInput) => Guilds;
  updateGuilds: (
    args: { data: GuildsUpdateInput; where: GuildsWhereUniqueInput }
  ) => Guilds;
  updateManyGuildses: (
    args: { data: GuildsUpdateInput; where?: GuildsWhereInput }
  ) => BatchPayload;
  upsertGuilds: (
    args: {
      where: GuildsWhereUniqueInput;
      create: GuildsCreateInput;
      update: GuildsUpdateInput;
    }
  ) => Guilds;
  deleteGuilds: (where: GuildsWhereUniqueInput) => Guilds;
  deleteManyGuildses: (where?: GuildsWhereInput) => BatchPayload;
  createMessages: (data: MessagesCreateInput) => Messages;
  updateMessages: (
    args: { data: MessagesUpdateInput; where: MessagesWhereUniqueInput }
  ) => Messages;
  updateManyMessageses: (
    args: { data: MessagesUpdateInput; where?: MessagesWhereInput }
  ) => BatchPayload;
  upsertMessages: (
    args: {
      where: MessagesWhereUniqueInput;
      create: MessagesCreateInput;
      update: MessagesUpdateInput;
    }
  ) => Messages;
  deleteMessages: (where: MessagesWhereUniqueInput) => Messages;
  deleteManyMessageses: (where?: MessagesWhereInput) => BatchPayload;
  createUsers: (data: UsersCreateInput) => Users;
  updateUsers: (
    args: { data: UsersUpdateInput; where: UsersWhereUniqueInput }
  ) => Users;
  updateManyUserses: (
    args: { data: UsersUpdateInput; where?: UsersWhereInput }
  ) => BatchPayload;
  upsertUsers: (
    args: {
      where: UsersWhereUniqueInput;
      create: UsersCreateInput;
      update: UsersUpdateInput;
    }
  ) => Users;
  deleteUsers: (where: UsersWhereUniqueInput) => Users;
  deleteManyUserses: (where?: UsersWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  channels: (
    where?: ChannelsSubscriptionWhereInput
  ) => ChannelsSubscriptionPayloadSubscription;
  credentials: (
    where?: CredentialsSubscriptionWhereInput
  ) => CredentialsSubscriptionPayloadSubscription;
  guild_channels: (
    where?: Guild_channelsSubscriptionWhereInput
  ) => Guild_channelsSubscriptionPayloadSubscription;
  guild_members: (
    where?: Guild_membersSubscriptionWhereInput
  ) => Guild_membersSubscriptionPayloadSubscription;
  guilds: (
    where?: GuildsSubscriptionWhereInput
  ) => GuildsSubscriptionPayloadSubscription;
  messages: (
    where?: MessagesSubscriptionWhereInput
  ) => MessagesSubscriptionPayloadSubscription;
  users: (
    where?: UsersSubscriptionWhereInput
  ) => UsersSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Guild_channelsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Guild_membersOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ChannelsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "channelname_ASC"
  | "channelname_DESC"
  | "guild_id_ASC"
  | "guild_id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CredentialsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GuildsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "guildname_ASC"
  | "guildname_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessagesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UsersOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GuildsUpdateWithoutGuild_channelsDataInput {
  guild_members?: Guild_membersUpdateManyWithoutGuildInput;
  guildname?: String;
  owner?: String;
}

export type ChannelsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UsersUpdateWithoutGuild_membersDataInput {
  channels?: ChannelsUpdateManyWithoutOwnerInput;
  credentials?: CredentialsUpdateManyWithoutUserInput;
  email?: String;
  guilds?: GuildsUpdateManyInput;
  messages?: MessagesUpdateManyWithoutAuthorInput;
  username?: String;
}

export interface GuildsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guild_channels_every?: Guild_channelsWhereInput;
  guild_channels_some?: Guild_channelsWhereInput;
  guild_channels_none?: Guild_channelsWhereInput;
  guild_members_every?: Guild_membersWhereInput;
  guild_members_some?: Guild_membersWhereInput;
  guild_members_none?: Guild_membersWhereInput;
  guildname?: String;
  guildname_not?: String;
  guildname_in?: String[] | String;
  guildname_not_in?: String[] | String;
  guildname_lt?: String;
  guildname_lte?: String;
  guildname_gt?: String;
  guildname_gte?: String;
  guildname_contains?: String;
  guildname_not_contains?: String;
  guildname_starts_with?: String;
  guildname_not_starts_with?: String;
  guildname_ends_with?: String;
  guildname_not_ends_with?: String;
  owner?: String;
  owner_not?: String;
  owner_in?: String[] | String;
  owner_not_in?: String[] | String;
  owner_lt?: String;
  owner_lte?: String;
  owner_gt?: String;
  owner_gte?: String;
  owner_contains?: String;
  owner_not_contains?: String;
  owner_starts_with?: String;
  owner_not_starts_with?: String;
  owner_ends_with?: String;
  owner_not_ends_with?: String;
  AND?: GuildsWhereInput[] | GuildsWhereInput;
  OR?: GuildsWhereInput[] | GuildsWhereInput;
  NOT?: GuildsWhereInput[] | GuildsWhereInput;
}

export interface ChannelsUpdateManyWithoutOwnerInput {
  create?: ChannelsCreateWithoutOwnerInput[] | ChannelsCreateWithoutOwnerInput;
  delete?: ChannelsWhereUniqueInput[] | ChannelsWhereUniqueInput;
  connect?: ChannelsWhereUniqueInput[] | ChannelsWhereUniqueInput;
  disconnect?: ChannelsWhereUniqueInput[] | ChannelsWhereUniqueInput;
  update?:
    | ChannelsUpdateWithWhereUniqueWithoutOwnerInput[]
    | ChannelsUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | ChannelsUpsertWithWhereUniqueWithoutOwnerInput[]
    | ChannelsUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface Guild_membersWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guild?: GuildsWhereInput;
  user?: UsersWhereInput;
  AND?: Guild_membersWhereInput[] | Guild_membersWhereInput;
  OR?: Guild_membersWhereInput[] | Guild_membersWhereInput;
  NOT?: Guild_membersWhereInput[] | Guild_membersWhereInput;
}

export interface Guild_channelsCreateManyWithoutGuildInput {
  create?:
    | Guild_channelsCreateWithoutGuildInput[]
    | Guild_channelsCreateWithoutGuildInput;
  connect?: Guild_channelsWhereUniqueInput[] | Guild_channelsWhereUniqueInput;
}

export interface GuildsUpsertWithoutGuild_membersInput {
  update: GuildsUpdateWithoutGuild_membersDataInput;
  create: GuildsCreateWithoutGuild_membersInput;
}

export interface Guild_channelsCreateWithoutGuildInput {
  channel?: ChannelsCreateOneWithoutGuild_channelsInput;
}

export interface ChannelsUpdateWithWhereUniqueWithoutOwnerInput {
  where: ChannelsWhereUniqueInput;
  data: ChannelsUpdateWithoutOwnerDataInput;
}

export interface ChannelsCreateOneWithoutGuild_channelsInput {
  create?: ChannelsCreateWithoutGuild_channelsInput;
  connect?: ChannelsWhereUniqueInput;
}

export interface MessagesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessagesWhereInput;
  AND?: MessagesSubscriptionWhereInput[] | MessagesSubscriptionWhereInput;
  OR?: MessagesSubscriptionWhereInput[] | MessagesSubscriptionWhereInput;
  NOT?: MessagesSubscriptionWhereInput[] | MessagesSubscriptionWhereInput;
}

export interface ChannelsCreateWithoutGuild_channelsInput {
  channelname: String;
  guild_id: String;
  messages?: MessagesCreateManyWithoutChannelInput;
  owner?: UsersCreateOneWithoutChannelsInput;
  type: Int;
}

export interface MessagesWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: UsersWhereInput;
  channel?: ChannelsWhereInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: MessagesWhereInput[] | MessagesWhereInput;
  OR?: MessagesWhereInput[] | MessagesWhereInput;
  NOT?: MessagesWhereInput[] | MessagesWhereInput;
}

export interface UsersCreateOneWithoutChannelsInput {
  create?: UsersCreateWithoutChannelsInput;
  connect?: UsersWhereUniqueInput;
}

export interface ChannelsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  channelname?: String;
  channelname_not?: String;
  channelname_in?: String[] | String;
  channelname_not_in?: String[] | String;
  channelname_lt?: String;
  channelname_lte?: String;
  channelname_gt?: String;
  channelname_gte?: String;
  channelname_contains?: String;
  channelname_not_contains?: String;
  channelname_starts_with?: String;
  channelname_not_starts_with?: String;
  channelname_ends_with?: String;
  channelname_not_ends_with?: String;
  guild_channels_every?: Guild_channelsWhereInput;
  guild_channels_some?: Guild_channelsWhereInput;
  guild_channels_none?: Guild_channelsWhereInput;
  guild_id?: String;
  guild_id_not?: String;
  guild_id_in?: String[] | String;
  guild_id_not_in?: String[] | String;
  guild_id_lt?: String;
  guild_id_lte?: String;
  guild_id_gt?: String;
  guild_id_gte?: String;
  guild_id_contains?: String;
  guild_id_not_contains?: String;
  guild_id_starts_with?: String;
  guild_id_not_starts_with?: String;
  guild_id_ends_with?: String;
  guild_id_not_ends_with?: String;
  messages_every?: MessagesWhereInput;
  messages_some?: MessagesWhereInput;
  messages_none?: MessagesWhereInput;
  owner?: UsersWhereInput;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  AND?: ChannelsWhereInput[] | ChannelsWhereInput;
  OR?: ChannelsWhereInput[] | ChannelsWhereInput;
  NOT?: ChannelsWhereInput[] | ChannelsWhereInput;
}

export interface UsersCreateWithoutChannelsInput {
  credentials?: CredentialsCreateManyWithoutUserInput;
  email: String;
  guild_members?: Guild_membersCreateManyWithoutUserInput;
  guilds?: GuildsCreateManyInput;
  messages?: MessagesCreateManyWithoutAuthorInput;
  username: String;
}

export interface Guild_membersSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Guild_membersWhereInput;
  AND?:
    | Guild_membersSubscriptionWhereInput[]
    | Guild_membersSubscriptionWhereInput;
  OR?:
    | Guild_membersSubscriptionWhereInput[]
    | Guild_membersSubscriptionWhereInput;
  NOT?:
    | Guild_membersSubscriptionWhereInput[]
    | Guild_membersSubscriptionWhereInput;
}

export interface GuildsCreateManyInput {
  create?: GuildsCreateInput[] | GuildsCreateInput;
  connect?: GuildsWhereUniqueInput[] | GuildsWhereUniqueInput;
}

export interface CredentialsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CredentialsWhereInput;
  AND?: CredentialsSubscriptionWhereInput[] | CredentialsSubscriptionWhereInput;
  OR?: CredentialsSubscriptionWhereInput[] | CredentialsSubscriptionWhereInput;
  NOT?: CredentialsSubscriptionWhereInput[] | CredentialsSubscriptionWhereInput;
}

export interface GuildsCreateInput {
  guild_channels?: Guild_channelsCreateManyWithoutGuildInput;
  guild_members?: Guild_membersCreateManyWithoutGuildInput;
  guildname: String;
  owner: String;
}

export interface UsersUpdateInput {
  channels?: ChannelsUpdateManyWithoutOwnerInput;
  credentials?: CredentialsUpdateManyWithoutUserInput;
  email?: String;
  guild_members?: Guild_membersUpdateManyWithoutUserInput;
  guilds?: GuildsUpdateManyInput;
  messages?: MessagesUpdateManyWithoutAuthorInput;
  username?: String;
}

export interface MessagesCreateManyWithoutAuthorInput {
  create?:
    | MessagesCreateWithoutAuthorInput[]
    | MessagesCreateWithoutAuthorInput;
  connect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
}

export type CredentialsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessagesCreateWithoutAuthorInput {
  channel?: ChannelsCreateOneWithoutMessagesInput;
  content: String;
}

export interface MessagesCreateInput {
  author?: UsersCreateOneWithoutMessagesInput;
  channel?: ChannelsCreateOneWithoutMessagesInput;
  content: String;
}

export interface ChannelsCreateOneWithoutMessagesInput {
  create?: ChannelsCreateWithoutMessagesInput;
  connect?: ChannelsWhereUniqueInput;
}

export type Guild_channelsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ChannelsCreateWithoutMessagesInput {
  channelname: String;
  guild_channels?: Guild_channelsCreateManyWithoutChannelInput;
  guild_id: String;
  owner?: UsersCreateOneWithoutChannelsInput;
  type: Int;
}

export interface Guild_membersCreateInput {
  guild?: GuildsCreateOneWithoutGuild_membersInput;
  user?: UsersCreateOneWithoutGuild_membersInput;
}

export interface ChannelsUpdateInput {
  channelname?: String;
  guild_channels?: Guild_channelsUpdateManyWithoutChannelInput;
  guild_id?: String;
  messages?: MessagesUpdateManyWithoutChannelInput;
  owner?: UsersUpdateOneWithoutChannelsInput;
  type?: Int;
}

export type Guild_membersWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Guild_channelsUpdateManyWithoutChannelInput {
  create?:
    | Guild_channelsCreateWithoutChannelInput[]
    | Guild_channelsCreateWithoutChannelInput;
  delete?: Guild_channelsWhereUniqueInput[] | Guild_channelsWhereUniqueInput;
  connect?: Guild_channelsWhereUniqueInput[] | Guild_channelsWhereUniqueInput;
  disconnect?:
    | Guild_channelsWhereUniqueInput[]
    | Guild_channelsWhereUniqueInput;
  update?:
    | Guild_channelsUpdateWithWhereUniqueWithoutChannelInput[]
    | Guild_channelsUpdateWithWhereUniqueWithoutChannelInput;
  upsert?:
    | Guild_channelsUpsertWithWhereUniqueWithoutChannelInput[]
    | Guild_channelsUpsertWithWhereUniqueWithoutChannelInput;
}

export interface UsersUpsertWithoutCredentialsInput {
  update: UsersUpdateWithoutCredentialsDataInput;
  create: UsersCreateWithoutCredentialsInput;
}

export interface Guild_channelsUpdateWithWhereUniqueWithoutChannelInput {
  where: Guild_channelsWhereUniqueInput;
  data: Guild_channelsUpdateWithoutChannelDataInput;
}

export type GuildsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Guild_channelsUpdateWithoutChannelDataInput {
  guild?: GuildsUpdateOneWithoutGuild_channelsInput;
}

export interface CredentialsUpdateInput {
  password?: String;
  user?: UsersUpdateOneWithoutCredentialsInput;
}

export interface GuildsUpdateOneWithoutGuild_channelsInput {
  create?: GuildsCreateWithoutGuild_channelsInput;
  update?: GuildsUpdateWithoutGuild_channelsDataInput;
  upsert?: GuildsUpsertWithoutGuild_channelsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GuildsWhereUniqueInput;
}

export type MessagesWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessagesUpsertWithWhereUniqueWithoutChannelInput {
  where: MessagesWhereUniqueInput;
  update: MessagesUpdateWithoutChannelDataInput;
  create: MessagesCreateWithoutChannelInput;
}

export interface CredentialsCreateInput {
  password: String;
  user?: UsersCreateOneWithoutCredentialsInput;
}

export interface Guild_membersUpdateManyWithoutGuildInput {
  create?:
    | Guild_membersCreateWithoutGuildInput[]
    | Guild_membersCreateWithoutGuildInput;
  delete?: Guild_membersWhereUniqueInput[] | Guild_membersWhereUniqueInput;
  connect?: Guild_membersWhereUniqueInput[] | Guild_membersWhereUniqueInput;
  disconnect?: Guild_membersWhereUniqueInput[] | Guild_membersWhereUniqueInput;
  update?:
    | Guild_membersUpdateWithWhereUniqueWithoutGuildInput[]
    | Guild_membersUpdateWithWhereUniqueWithoutGuildInput;
  upsert?:
    | Guild_membersUpsertWithWhereUniqueWithoutGuildInput[]
    | Guild_membersUpsertWithWhereUniqueWithoutGuildInput;
}

export type UsersWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  username?: String;
}>;

export interface Guild_membersUpdateWithWhereUniqueWithoutGuildInput {
  where: Guild_membersWhereUniqueInput;
  data: Guild_membersUpdateWithoutGuildDataInput;
}

export interface Guild_membersUpsertWithWhereUniqueWithoutGuildInput {
  where: Guild_membersWhereUniqueInput;
  update: Guild_membersUpdateWithoutGuildDataInput;
  create: Guild_membersCreateWithoutGuildInput;
}

export interface Guild_membersUpdateWithoutGuildDataInput {
  user?: UsersUpdateOneWithoutGuild_membersInput;
}

export interface ChannelsUpsertWithWhereUniqueWithoutOwnerInput {
  where: ChannelsWhereUniqueInput;
  update: ChannelsUpdateWithoutOwnerDataInput;
  create: ChannelsCreateWithoutOwnerInput;
}

export interface UsersUpdateOneWithoutGuild_membersInput {
  create?: UsersCreateWithoutGuild_membersInput;
  update?: UsersUpdateWithoutGuild_membersDataInput;
  upsert?: UsersUpsertWithoutGuild_membersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UsersWhereUniqueInput;
}

export interface ChannelsCreateInput {
  channelname: String;
  guild_channels?: Guild_channelsCreateManyWithoutChannelInput;
  guild_id: String;
  messages?: MessagesCreateManyWithoutChannelInput;
  owner?: UsersCreateOneWithoutChannelsInput;
  type: Int;
}

export interface UsersUpsertWithoutMessagesInput {
  update: UsersUpdateWithoutMessagesDataInput;
  create: UsersCreateWithoutMessagesInput;
}

export interface Guild_channelsCreateWithoutChannelInput {
  guild?: GuildsCreateOneWithoutGuild_channelsInput;
}

export interface Guild_membersUpsertWithWhereUniqueWithoutUserInput {
  where: Guild_membersWhereUniqueInput;
  update: Guild_membersUpdateWithoutUserDataInput;
  create: Guild_membersCreateWithoutUserInput;
}

export interface GuildsCreateWithoutGuild_channelsInput {
  guild_members?: Guild_membersCreateManyWithoutGuildInput;
  guildname: String;
  owner: String;
}

export interface CredentialsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  user?: UsersWhereInput;
  AND?: CredentialsWhereInput[] | CredentialsWhereInput;
  OR?: CredentialsWhereInput[] | CredentialsWhereInput;
  NOT?: CredentialsWhereInput[] | CredentialsWhereInput;
}

export interface Guild_membersCreateWithoutGuildInput {
  user?: UsersCreateOneWithoutGuild_membersInput;
}

export interface ChannelsUpdateWithoutOwnerDataInput {
  channelname?: String;
  guild_channels?: Guild_channelsUpdateManyWithoutChannelInput;
  guild_id?: String;
  messages?: MessagesUpdateManyWithoutChannelInput;
  type?: Int;
}

export interface UsersCreateWithoutGuild_membersInput {
  channels?: ChannelsCreateManyWithoutOwnerInput;
  credentials?: CredentialsCreateManyWithoutUserInput;
  email: String;
  guilds?: GuildsCreateManyInput;
  messages?: MessagesCreateManyWithoutAuthorInput;
  username: String;
}

export interface MessagesUpdateManyWithoutChannelInput {
  create?:
    | MessagesCreateWithoutChannelInput[]
    | MessagesCreateWithoutChannelInput;
  delete?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  connect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  disconnect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  update?:
    | MessagesUpdateWithWhereUniqueWithoutChannelInput[]
    | MessagesUpdateWithWhereUniqueWithoutChannelInput;
  upsert?:
    | MessagesUpsertWithWhereUniqueWithoutChannelInput[]
    | MessagesUpsertWithWhereUniqueWithoutChannelInput;
}

export interface ChannelsCreateWithoutOwnerInput {
  channelname: String;
  guild_channels?: Guild_channelsCreateManyWithoutChannelInput;
  guild_id: String;
  messages?: MessagesCreateManyWithoutChannelInput;
  type: Int;
}

export interface MessagesUpdateWithWhereUniqueWithoutChannelInput {
  where: MessagesWhereUniqueInput;
  data: MessagesUpdateWithoutChannelDataInput;
}

export interface MessagesCreateWithoutChannelInput {
  author?: UsersCreateOneWithoutMessagesInput;
  content: String;
}

export interface MessagesUpdateWithoutChannelDataInput {
  author?: UsersUpdateOneWithoutMessagesInput;
  content?: String;
}

export interface UsersCreateWithoutMessagesInput {
  channels?: ChannelsCreateManyWithoutOwnerInput;
  credentials?: CredentialsCreateManyWithoutUserInput;
  email: String;
  guild_members?: Guild_membersCreateManyWithoutUserInput;
  guilds?: GuildsCreateManyInput;
  username: String;
}

export interface UsersUpdateOneWithoutMessagesInput {
  create?: UsersCreateWithoutMessagesInput;
  update?: UsersUpdateWithoutMessagesDataInput;
  upsert?: UsersUpsertWithoutMessagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UsersWhereUniqueInput;
}

export interface CredentialsCreateWithoutUserInput {
  password: String;
}

export interface UsersUpdateWithoutMessagesDataInput {
  channels?: ChannelsUpdateManyWithoutOwnerInput;
  credentials?: CredentialsUpdateManyWithoutUserInput;
  email?: String;
  guild_members?: Guild_membersUpdateManyWithoutUserInput;
  guilds?: GuildsUpdateManyInput;
  username?: String;
}

export interface Guild_membersCreateWithoutUserInput {
  guild?: GuildsCreateOneWithoutGuild_membersInput;
}

export interface CredentialsUpdateManyWithoutUserInput {
  create?:
    | CredentialsCreateWithoutUserInput[]
    | CredentialsCreateWithoutUserInput;
  delete?: CredentialsWhereUniqueInput[] | CredentialsWhereUniqueInput;
  connect?: CredentialsWhereUniqueInput[] | CredentialsWhereUniqueInput;
  disconnect?: CredentialsWhereUniqueInput[] | CredentialsWhereUniqueInput;
  update?:
    | CredentialsUpdateWithWhereUniqueWithoutUserInput[]
    | CredentialsUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | CredentialsUpsertWithWhereUniqueWithoutUserInput[]
    | CredentialsUpsertWithWhereUniqueWithoutUserInput;
}

export interface GuildsCreateWithoutGuild_membersInput {
  guild_channels?: Guild_channelsCreateManyWithoutGuildInput;
  guildname: String;
  owner: String;
}

export interface CredentialsUpdateWithWhereUniqueWithoutUserInput {
  where: CredentialsWhereUniqueInput;
  data: CredentialsUpdateWithoutUserDataInput;
}

export interface UsersWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  channels_every?: ChannelsWhereInput;
  channels_some?: ChannelsWhereInput;
  channels_none?: ChannelsWhereInput;
  credentials_every?: CredentialsWhereInput;
  credentials_some?: CredentialsWhereInput;
  credentials_none?: CredentialsWhereInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  guild_members_every?: Guild_membersWhereInput;
  guild_members_some?: Guild_membersWhereInput;
  guild_members_none?: Guild_membersWhereInput;
  guilds_every?: GuildsWhereInput;
  guilds_some?: GuildsWhereInput;
  guilds_none?: GuildsWhereInput;
  messages_every?: MessagesWhereInput;
  messages_some?: MessagesWhereInput;
  messages_none?: MessagesWhereInput;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  AND?: UsersWhereInput[] | UsersWhereInput;
  OR?: UsersWhereInput[] | UsersWhereInput;
  NOT?: UsersWhereInput[] | UsersWhereInput;
}

export interface CredentialsUpdateWithoutUserDataInput {
  password?: String;
}

export interface Guild_channelsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  channel?: ChannelsWhereInput;
  guild?: GuildsWhereInput;
  AND?: Guild_channelsWhereInput[] | Guild_channelsWhereInput;
  OR?: Guild_channelsWhereInput[] | Guild_channelsWhereInput;
  NOT?: Guild_channelsWhereInput[] | Guild_channelsWhereInput;
}

export interface CredentialsUpsertWithWhereUniqueWithoutUserInput {
  where: CredentialsWhereUniqueInput;
  update: CredentialsUpdateWithoutUserDataInput;
  create: CredentialsCreateWithoutUserInput;
}

export interface ChannelsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChannelsWhereInput;
  AND?: ChannelsSubscriptionWhereInput[] | ChannelsSubscriptionWhereInput;
  OR?: ChannelsSubscriptionWhereInput[] | ChannelsSubscriptionWhereInput;
  NOT?: ChannelsSubscriptionWhereInput[] | ChannelsSubscriptionWhereInput;
}

export interface Guild_membersUpdateManyWithoutUserInput {
  create?:
    | Guild_membersCreateWithoutUserInput[]
    | Guild_membersCreateWithoutUserInput;
  delete?: Guild_membersWhereUniqueInput[] | Guild_membersWhereUniqueInput;
  connect?: Guild_membersWhereUniqueInput[] | Guild_membersWhereUniqueInput;
  disconnect?: Guild_membersWhereUniqueInput[] | Guild_membersWhereUniqueInput;
  update?:
    | Guild_membersUpdateWithWhereUniqueWithoutUserInput[]
    | Guild_membersUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | Guild_membersUpsertWithWhereUniqueWithoutUserInput[]
    | Guild_membersUpsertWithWhereUniqueWithoutUserInput;
}

export interface MessagesUpdateInput {
  author?: UsersUpdateOneWithoutMessagesInput;
  channel?: ChannelsUpdateOneWithoutMessagesInput;
  content?: String;
}

export interface Guild_membersUpdateWithWhereUniqueWithoutUserInput {
  where: Guild_membersWhereUniqueInput;
  data: Guild_membersUpdateWithoutUserDataInput;
}

export interface Guild_membersUpdateInput {
  guild?: GuildsUpdateOneWithoutGuild_membersInput;
  user?: UsersUpdateOneWithoutGuild_membersInput;
}

export interface Guild_membersUpdateWithoutUserDataInput {
  guild?: GuildsUpdateOneWithoutGuild_membersInput;
}

export interface Guild_channelsCreateInput {
  channel?: ChannelsCreateOneWithoutGuild_channelsInput;
  guild?: GuildsCreateOneWithoutGuild_channelsInput;
}

export interface GuildsUpdateOneWithoutGuild_membersInput {
  create?: GuildsCreateWithoutGuild_membersInput;
  update?: GuildsUpdateWithoutGuild_membersDataInput;
  upsert?: GuildsUpsertWithoutGuild_membersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GuildsWhereUniqueInput;
}

export interface UsersUpdateOneWithoutCredentialsInput {
  create?: UsersCreateWithoutCredentialsInput;
  update?: UsersUpdateWithoutCredentialsDataInput;
  upsert?: UsersUpsertWithoutCredentialsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UsersWhereUniqueInput;
}

export interface GuildsUpdateWithoutGuild_membersDataInput {
  guild_channels?: Guild_channelsUpdateManyWithoutGuildInput;
  guildname?: String;
  owner?: String;
}

export interface UsersCreateOneWithoutCredentialsInput {
  create?: UsersCreateWithoutCredentialsInput;
  connect?: UsersWhereUniqueInput;
}

export interface Guild_channelsUpdateManyWithoutGuildInput {
  create?:
    | Guild_channelsCreateWithoutGuildInput[]
    | Guild_channelsCreateWithoutGuildInput;
  delete?: Guild_channelsWhereUniqueInput[] | Guild_channelsWhereUniqueInput;
  connect?: Guild_channelsWhereUniqueInput[] | Guild_channelsWhereUniqueInput;
  disconnect?:
    | Guild_channelsWhereUniqueInput[]
    | Guild_channelsWhereUniqueInput;
  update?:
    | Guild_channelsUpdateWithWhereUniqueWithoutGuildInput[]
    | Guild_channelsUpdateWithWhereUniqueWithoutGuildInput;
  upsert?:
    | Guild_channelsUpsertWithWhereUniqueWithoutGuildInput[]
    | Guild_channelsUpsertWithWhereUniqueWithoutGuildInput;
}

export interface GuildsUpsertWithoutGuild_channelsInput {
  update: GuildsUpdateWithoutGuild_channelsDataInput;
  create: GuildsCreateWithoutGuild_channelsInput;
}

export interface Guild_channelsUpdateWithWhereUniqueWithoutGuildInput {
  where: Guild_channelsWhereUniqueInput;
  data: Guild_channelsUpdateWithoutGuildDataInput;
}

export interface GuildsCreateOneWithoutGuild_channelsInput {
  create?: GuildsCreateWithoutGuild_channelsInput;
  connect?: GuildsWhereUniqueInput;
}

export interface Guild_channelsUpdateWithoutGuildDataInput {
  channel?: ChannelsUpdateOneWithoutGuild_channelsInput;
}

export interface UsersCreateOneWithoutGuild_membersInput {
  create?: UsersCreateWithoutGuild_membersInput;
  connect?: UsersWhereUniqueInput;
}

export interface ChannelsUpdateOneWithoutGuild_channelsInput {
  create?: ChannelsCreateWithoutGuild_channelsInput;
  update?: ChannelsUpdateWithoutGuild_channelsDataInput;
  upsert?: ChannelsUpsertWithoutGuild_channelsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ChannelsWhereUniqueInput;
}

export interface MessagesCreateManyWithoutChannelInput {
  create?:
    | MessagesCreateWithoutChannelInput[]
    | MessagesCreateWithoutChannelInput;
  connect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
}

export interface ChannelsUpdateWithoutGuild_channelsDataInput {
  channelname?: String;
  guild_id?: String;
  messages?: MessagesUpdateManyWithoutChannelInput;
  owner?: UsersUpdateOneWithoutChannelsInput;
  type?: Int;
}

export interface CredentialsCreateManyWithoutUserInput {
  create?:
    | CredentialsCreateWithoutUserInput[]
    | CredentialsCreateWithoutUserInput;
  connect?: CredentialsWhereUniqueInput[] | CredentialsWhereUniqueInput;
}

export interface UsersUpdateOneWithoutChannelsInput {
  create?: UsersCreateWithoutChannelsInput;
  update?: UsersUpdateWithoutChannelsDataInput;
  upsert?: UsersUpsertWithoutChannelsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UsersWhereUniqueInput;
}

export interface GuildsCreateOneWithoutGuild_membersInput {
  create?: GuildsCreateWithoutGuild_membersInput;
  connect?: GuildsWhereUniqueInput;
}

export interface UsersUpdateWithoutChannelsDataInput {
  credentials?: CredentialsUpdateManyWithoutUserInput;
  email?: String;
  guild_members?: Guild_membersUpdateManyWithoutUserInput;
  guilds?: GuildsUpdateManyInput;
  messages?: MessagesUpdateManyWithoutAuthorInput;
  username?: String;
}

export interface GuildsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GuildsWhereInput;
  AND?: GuildsSubscriptionWhereInput[] | GuildsSubscriptionWhereInput;
  OR?: GuildsSubscriptionWhereInput[] | GuildsSubscriptionWhereInput;
  NOT?: GuildsSubscriptionWhereInput[] | GuildsSubscriptionWhereInput;
}

export interface GuildsUpdateManyInput {
  create?: GuildsCreateInput[] | GuildsCreateInput;
  update?:
    | GuildsUpdateWithWhereUniqueNestedInput[]
    | GuildsUpdateWithWhereUniqueNestedInput;
  upsert?:
    | GuildsUpsertWithWhereUniqueNestedInput[]
    | GuildsUpsertWithWhereUniqueNestedInput;
  delete?: GuildsWhereUniqueInput[] | GuildsWhereUniqueInput;
  connect?: GuildsWhereUniqueInput[] | GuildsWhereUniqueInput;
  disconnect?: GuildsWhereUniqueInput[] | GuildsWhereUniqueInput;
}

export interface UsersCreateInput {
  channels?: ChannelsCreateManyWithoutOwnerInput;
  credentials?: CredentialsCreateManyWithoutUserInput;
  email: String;
  guild_members?: Guild_membersCreateManyWithoutUserInput;
  guilds?: GuildsCreateManyInput;
  messages?: MessagesCreateManyWithoutAuthorInput;
  username: String;
}

export interface GuildsUpdateWithWhereUniqueNestedInput {
  where: GuildsWhereUniqueInput;
  data: GuildsUpdateDataInput;
}

export interface Guild_channelsUpdateInput {
  channel?: ChannelsUpdateOneWithoutGuild_channelsInput;
  guild?: GuildsUpdateOneWithoutGuild_channelsInput;
}

export interface GuildsUpdateDataInput {
  guild_channels?: Guild_channelsUpdateManyWithoutGuildInput;
  guild_members?: Guild_membersUpdateManyWithoutGuildInput;
  guildname?: String;
  owner?: String;
}

export interface UsersCreateWithoutCredentialsInput {
  channels?: ChannelsCreateManyWithoutOwnerInput;
  email: String;
  guild_members?: Guild_membersCreateManyWithoutUserInput;
  guilds?: GuildsCreateManyInput;
  messages?: MessagesCreateManyWithoutAuthorInput;
  username: String;
}

export interface GuildsUpsertWithWhereUniqueNestedInput {
  where: GuildsWhereUniqueInput;
  update: GuildsUpdateDataInput;
  create: GuildsCreateInput;
}

export interface UsersUpsertWithoutGuild_membersInput {
  update: UsersUpdateWithoutGuild_membersDataInput;
  create: UsersCreateWithoutGuild_membersInput;
}

export interface MessagesUpdateManyWithoutAuthorInput {
  create?:
    | MessagesCreateWithoutAuthorInput[]
    | MessagesCreateWithoutAuthorInput;
  delete?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  connect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  disconnect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  update?:
    | MessagesUpdateWithWhereUniqueWithoutAuthorInput[]
    | MessagesUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | MessagesUpsertWithWhereUniqueWithoutAuthorInput[]
    | MessagesUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface Guild_membersCreateManyWithoutGuildInput {
  create?:
    | Guild_membersCreateWithoutGuildInput[]
    | Guild_membersCreateWithoutGuildInput;
  connect?: Guild_membersWhereUniqueInput[] | Guild_membersWhereUniqueInput;
}

export interface MessagesUpdateWithWhereUniqueWithoutAuthorInput {
  where: MessagesWhereUniqueInput;
  data: MessagesUpdateWithoutAuthorDataInput;
}

export interface UsersCreateOneWithoutMessagesInput {
  create?: UsersCreateWithoutMessagesInput;
  connect?: UsersWhereUniqueInput;
}

export interface MessagesUpdateWithoutAuthorDataInput {
  channel?: ChannelsUpdateOneWithoutMessagesInput;
  content?: String;
}

export interface UsersSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UsersWhereInput;
  AND?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
  OR?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
  NOT?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
}

export interface ChannelsUpdateOneWithoutMessagesInput {
  create?: ChannelsCreateWithoutMessagesInput;
  update?: ChannelsUpdateWithoutMessagesDataInput;
  upsert?: ChannelsUpsertWithoutMessagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ChannelsWhereUniqueInput;
}

export interface GuildsUpdateInput {
  guild_channels?: Guild_channelsUpdateManyWithoutGuildInput;
  guild_members?: Guild_membersUpdateManyWithoutGuildInput;
  guildname?: String;
  owner?: String;
}

export interface ChannelsUpdateWithoutMessagesDataInput {
  channelname?: String;
  guild_channels?: Guild_channelsUpdateManyWithoutChannelInput;
  guild_id?: String;
  owner?: UsersUpdateOneWithoutChannelsInput;
  type?: Int;
}

export interface Guild_channelsUpsertWithWhereUniqueWithoutChannelInput {
  where: Guild_channelsWhereUniqueInput;
  update: Guild_channelsUpdateWithoutChannelDataInput;
  create: Guild_channelsCreateWithoutChannelInput;
}

export interface ChannelsUpsertWithoutMessagesInput {
  update: ChannelsUpdateWithoutMessagesDataInput;
  create: ChannelsCreateWithoutMessagesInput;
}

export interface ChannelsCreateManyWithoutOwnerInput {
  create?: ChannelsCreateWithoutOwnerInput[] | ChannelsCreateWithoutOwnerInput;
  connect?: ChannelsWhereUniqueInput[] | ChannelsWhereUniqueInput;
}

export interface Guild_channelsUpsertWithWhereUniqueWithoutGuildInput {
  where: Guild_channelsWhereUniqueInput;
  update: Guild_channelsUpdateWithoutGuildDataInput;
  create: Guild_channelsCreateWithoutGuildInput;
}

export interface ChannelsUpsertWithoutGuild_channelsInput {
  update: ChannelsUpdateWithoutGuild_channelsDataInput;
  create: ChannelsCreateWithoutGuild_channelsInput;
}

export interface UsersUpsertWithoutChannelsInput {
  update: UsersUpdateWithoutChannelsDataInput;
  create: UsersCreateWithoutChannelsInput;
}

export interface MessagesUpsertWithWhereUniqueWithoutAuthorInput {
  where: MessagesWhereUniqueInput;
  update: MessagesUpdateWithoutAuthorDataInput;
  create: MessagesCreateWithoutAuthorInput;
}

export interface Guild_membersCreateManyWithoutUserInput {
  create?:
    | Guild_membersCreateWithoutUserInput[]
    | Guild_membersCreateWithoutUserInput;
  connect?: Guild_membersWhereUniqueInput[] | Guild_membersWhereUniqueInput;
}

export interface Guild_channelsCreateManyWithoutChannelInput {
  create?:
    | Guild_channelsCreateWithoutChannelInput[]
    | Guild_channelsCreateWithoutChannelInput;
  connect?: Guild_channelsWhereUniqueInput[] | Guild_channelsWhereUniqueInput;
}

export interface UsersUpdateWithoutCredentialsDataInput {
  channels?: ChannelsUpdateManyWithoutOwnerInput;
  email?: String;
  guild_members?: Guild_membersUpdateManyWithoutUserInput;
  guilds?: GuildsUpdateManyInput;
  messages?: MessagesUpdateManyWithoutAuthorInput;
  username?: String;
}

export interface Guild_channelsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Guild_channelsWhereInput;
  AND?:
    | Guild_channelsSubscriptionWhereInput[]
    | Guild_channelsSubscriptionWhereInput;
  OR?:
    | Guild_channelsSubscriptionWhereInput[]
    | Guild_channelsSubscriptionWhereInput;
  NOT?:
    | Guild_channelsSubscriptionWhereInput[]
    | Guild_channelsSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UsersPreviousValuesNode {
  id: ID_Output;
  email: String;
  username: String;
}

export interface UsersPreviousValues
  extends Promise<UsersPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  username: () => Promise<String>;
}

export interface UsersPreviousValuesSubscription
  extends Promise<AsyncIterator<UsersPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChannelsNode {
  count: Int;
}

export interface AggregateChannels
  extends Promise<AggregateChannelsNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChannelsSubscription
  extends Promise<AsyncIterator<AggregateChannelsNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GuildsNode {
  id: ID_Output;
  guildname: String;
  owner: String;
}

export interface Guilds extends Promise<GuildsNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  guild_channels: <T = FragmentableArray<Guild_channelsNode>>(
    args?: {
      where?: Guild_channelsWhereInput;
      orderBy?: Guild_channelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  guild_members: <T = FragmentableArray<Guild_membersNode>>(
    args?: {
      where?: Guild_membersWhereInput;
      orderBy?: Guild_membersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  guildname: () => Promise<String>;
  owner: () => Promise<String>;
}

export interface GuildsSubscription
  extends Promise<AsyncIterator<GuildsNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guild_channels: <T = Promise<AsyncIterator<Guild_channelsSubscription>>>(
    args?: {
      where?: Guild_channelsWhereInput;
      orderBy?: Guild_channelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  guild_members: <T = Promise<AsyncIterator<Guild_membersSubscription>>>(
    args?: {
      where?: Guild_membersWhereInput;
      orderBy?: Guild_membersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  guildname: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<String>>;
}

export interface ChannelsEdgeNode {
  cursor: String;
}

export interface ChannelsEdge extends Promise<ChannelsEdgeNode>, Fragmentable {
  node: <T = Channels>() => T;
  cursor: () => Promise<String>;
}

export interface ChannelsEdgeSubscription
  extends Promise<AsyncIterator<ChannelsEdgeNode>>,
    Fragmentable {
  node: <T = ChannelsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Guild_channelsNode {
  id: ID_Output;
}

export interface Guild_channels
  extends Promise<Guild_channelsNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  channel: <T = Channels>() => T;
  guild: <T = Guilds>() => T;
}

export interface Guild_channelsSubscription
  extends Promise<AsyncIterator<Guild_channelsNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  channel: <T = ChannelsSubscription>() => T;
  guild: <T = GuildsSubscription>() => T;
}

export interface MessagesPreviousValuesNode {
  id: ID_Output;
  content: String;
}

export interface MessagesPreviousValues
  extends Promise<MessagesPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
}

export interface MessagesPreviousValuesSubscription
  extends Promise<AsyncIterator<MessagesPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface MessagesSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MessagesSubscriptionPayload
  extends Promise<MessagesSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Messages>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagesPreviousValues>() => T;
}

export interface MessagesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessagesSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessagesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagesPreviousValuesSubscription>() => T;
}

export interface AggregateUsersNode {
  count: Int;
}

export interface AggregateUsers
  extends Promise<AggregateUsersNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsersSubscription
  extends Promise<AsyncIterator<AggregateUsersNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UsersEdgeNode {
  cursor: String;
}

export interface UsersEdge extends Promise<UsersEdgeNode>, Fragmentable {
  node: <T = Users>() => T;
  cursor: () => Promise<String>;
}

export interface UsersEdgeSubscription
  extends Promise<AsyncIterator<UsersEdgeNode>>,
    Fragmentable {
  node: <T = UsersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UsersConnectionNode {}

export interface UsersConnection
  extends Promise<UsersConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UsersEdgeNode>>() => T;
  aggregate: <T = AggregateUsers>() => T;
}

export interface UsersConnectionSubscription
  extends Promise<AsyncIterator<UsersConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsersSubscription>() => T;
}

export interface AggregateMessagesNode {
  count: Int;
}

export interface AggregateMessages
  extends Promise<AggregateMessagesNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessagesSubscription
  extends Promise<AsyncIterator<AggregateMessagesNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChannelsNode {
  id: ID_Output;
  channelname: String;
  guild_id: String;
  type: Int;
}

export interface Channels extends Promise<ChannelsNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  channelname: () => Promise<String>;
  guild_channels: <T = FragmentableArray<Guild_channelsNode>>(
    args?: {
      where?: Guild_channelsWhereInput;
      orderBy?: Guild_channelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  guild_id: () => Promise<String>;
  messages: <T = FragmentableArray<MessagesNode>>(
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = Users>() => T;
  type: () => Promise<Int>;
}

export interface ChannelsSubscription
  extends Promise<AsyncIterator<ChannelsNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  channelname: () => Promise<AsyncIterator<String>>;
  guild_channels: <T = Promise<AsyncIterator<Guild_channelsSubscription>>>(
    args?: {
      where?: Guild_channelsWhereInput;
      orderBy?: Guild_channelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  guild_id: () => Promise<AsyncIterator<String>>;
  messages: <T = Promise<AsyncIterator<MessagesSubscription>>>(
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = UsersSubscription>() => T;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface Guild_membersNode {
  id: ID_Output;
}

export interface Guild_members
  extends Promise<Guild_membersNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  guild: <T = Guilds>() => T;
  user: <T = Users>() => T;
}

export interface Guild_membersSubscription
  extends Promise<AsyncIterator<Guild_membersNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guild: <T = GuildsSubscription>() => T;
  user: <T = UsersSubscription>() => T;
}

export interface ChannelsSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ChannelsSubscriptionPayload
  extends Promise<ChannelsSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Channels>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChannelsPreviousValues>() => T;
}

export interface ChannelsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChannelsSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChannelsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChannelsPreviousValuesSubscription>() => T;
}

export interface MessagesConnectionNode {}

export interface MessagesConnection
  extends Promise<MessagesConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MessagesEdgeNode>>() => T;
  aggregate: <T = AggregateMessages>() => T;
}

export interface MessagesConnectionSubscription
  extends Promise<AsyncIterator<MessagesConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessagesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessagesSubscription>() => T;
}

export interface ChannelsPreviousValuesNode {
  id: ID_Output;
  channelname: String;
  guild_id: String;
  type: Int;
}

export interface ChannelsPreviousValues
  extends Promise<ChannelsPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  channelname: () => Promise<String>;
  guild_id: () => Promise<String>;
  type: () => Promise<Int>;
}

export interface ChannelsPreviousValuesSubscription
  extends Promise<AsyncIterator<ChannelsPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  channelname: () => Promise<AsyncIterator<String>>;
  guild_id: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface GuildsEdgeNode {
  cursor: String;
}

export interface GuildsEdge extends Promise<GuildsEdgeNode>, Fragmentable {
  node: <T = Guilds>() => T;
  cursor: () => Promise<String>;
}

export interface GuildsEdgeSubscription
  extends Promise<AsyncIterator<GuildsEdgeNode>>,
    Fragmentable {
  node: <T = GuildsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGuild_membersNode {
  count: Int;
}

export interface AggregateGuild_members
  extends Promise<AggregateGuild_membersNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuild_membersSubscription
  extends Promise<AsyncIterator<AggregateGuild_membersNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CredentialsSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CredentialsSubscriptionPayload
  extends Promise<CredentialsSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Credentials>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CredentialsPreviousValues>() => T;
}

export interface CredentialsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CredentialsSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CredentialsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CredentialsPreviousValuesSubscription>() => T;
}

export interface Guild_membersConnectionNode {}

export interface Guild_membersConnection
  extends Promise<Guild_membersConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<Guild_membersEdgeNode>>() => T;
  aggregate: <T = AggregateGuild_members>() => T;
}

export interface Guild_membersConnectionSubscription
  extends Promise<AsyncIterator<Guild_membersConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Guild_membersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuild_membersSubscription>() => T;
}

export interface CredentialsPreviousValuesNode {
  id: ID_Output;
  password: String;
}

export interface CredentialsPreviousValues
  extends Promise<CredentialsPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
}

export interface CredentialsPreviousValuesSubscription
  extends Promise<AsyncIterator<CredentialsPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface Guild_channelsEdgeNode {
  cursor: String;
}

export interface Guild_channelsEdge
  extends Promise<Guild_channelsEdgeNode>,
    Fragmentable {
  node: <T = Guild_channels>() => T;
  cursor: () => Promise<String>;
}

export interface Guild_channelsEdgeSubscription
  extends Promise<AsyncIterator<Guild_channelsEdgeNode>>,
    Fragmentable {
  node: <T = Guild_channelsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChannelsConnectionNode {}

export interface ChannelsConnection
  extends Promise<ChannelsConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ChannelsEdgeNode>>() => T;
  aggregate: <T = AggregateChannels>() => T;
}

export interface ChannelsConnectionSubscription
  extends Promise<AsyncIterator<ChannelsConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChannelsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChannelsSubscription>() => T;
}

export interface AggregateCredentialsNode {
  count: Int;
}

export interface AggregateCredentials
  extends Promise<AggregateCredentialsNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCredentialsSubscription
  extends Promise<AsyncIterator<AggregateCredentialsNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Guild_channelsSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface Guild_channelsSubscriptionPayload
  extends Promise<Guild_channelsSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Guild_channels>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Guild_channelsPreviousValues>() => T;
}

export interface Guild_channelsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Guild_channelsSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Guild_channelsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Guild_channelsPreviousValuesSubscription>() => T;
}

export interface CredentialsConnectionNode {}

export interface CredentialsConnection
  extends Promise<CredentialsConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CredentialsEdgeNode>>() => T;
  aggregate: <T = AggregateCredentials>() => T;
}

export interface CredentialsConnectionSubscription
  extends Promise<AsyncIterator<CredentialsConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CredentialsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCredentialsSubscription>() => T;
}

export interface Guild_channelsPreviousValuesNode {
  id: ID_Output;
}

export interface Guild_channelsPreviousValues
  extends Promise<Guild_channelsPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface Guild_channelsPreviousValuesSubscription
  extends Promise<AsyncIterator<Guild_channelsPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MessagesNode {
  id: ID_Output;
  content: String;
}

export interface Messages extends Promise<MessagesNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = Users>() => T;
  channel: <T = Channels>() => T;
  content: () => Promise<String>;
}

export interface MessagesSubscription
  extends Promise<AsyncIterator<MessagesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UsersSubscription>() => T;
  channel: <T = ChannelsSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGuildsNode {
  count: Int;
}

export interface AggregateGuilds
  extends Promise<AggregateGuildsNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuildsSubscription
  extends Promise<AsyncIterator<AggregateGuildsNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Guild_membersSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface Guild_membersSubscriptionPayload
  extends Promise<Guild_membersSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Guild_members>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Guild_membersPreviousValues>() => T;
}

export interface Guild_membersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Guild_membersSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Guild_membersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Guild_membersPreviousValuesSubscription>() => T;
}

export interface Guild_membersEdgeNode {
  cursor: String;
}

export interface Guild_membersEdge
  extends Promise<Guild_membersEdgeNode>,
    Fragmentable {
  node: <T = Guild_members>() => T;
  cursor: () => Promise<String>;
}

export interface Guild_membersEdgeSubscription
  extends Promise<AsyncIterator<Guild_membersEdgeNode>>,
    Fragmentable {
  node: <T = Guild_membersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Guild_membersPreviousValuesNode {
  id: ID_Output;
}

export interface Guild_membersPreviousValues
  extends Promise<Guild_membersPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface Guild_membersPreviousValuesSubscription
  extends Promise<AsyncIterator<Guild_membersPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface Guild_channelsConnectionNode {}

export interface Guild_channelsConnection
  extends Promise<Guild_channelsConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<Guild_channelsEdgeNode>>() => T;
  aggregate: <T = AggregateGuild_channels>() => T;
}

export interface Guild_channelsConnectionSubscription
  extends Promise<AsyncIterator<Guild_channelsConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Guild_channelsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuild_channelsSubscription>() => T;
}

export interface UsersSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UsersSubscriptionPayload
  extends Promise<UsersSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Users>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsersPreviousValues>() => T;
}

export interface UsersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsersSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsersPreviousValuesSubscription>() => T;
}

export interface UsersNode {
  id: ID_Output;
  email: String;
  username: String;
}

export interface Users extends Promise<UsersNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  channels: <T = FragmentableArray<ChannelsNode>>(
    args?: {
      where?: ChannelsWhereInput;
      orderBy?: ChannelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  credentials: <T = FragmentableArray<CredentialsNode>>(
    args?: {
      where?: CredentialsWhereInput;
      orderBy?: CredentialsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  email: () => Promise<String>;
  guild_members: <T = FragmentableArray<Guild_membersNode>>(
    args?: {
      where?: Guild_membersWhereInput;
      orderBy?: Guild_membersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  guilds: <T = FragmentableArray<GuildsNode>>(
    args?: {
      where?: GuildsWhereInput;
      orderBy?: GuildsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = FragmentableArray<MessagesNode>>(
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  username: () => Promise<String>;
}

export interface UsersSubscription
  extends Promise<AsyncIterator<UsersNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  channels: <T = Promise<AsyncIterator<ChannelsSubscription>>>(
    args?: {
      where?: ChannelsWhereInput;
      orderBy?: ChannelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  credentials: <T = Promise<AsyncIterator<CredentialsSubscription>>>(
    args?: {
      where?: CredentialsWhereInput;
      orderBy?: CredentialsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  email: () => Promise<AsyncIterator<String>>;
  guild_members: <T = Promise<AsyncIterator<Guild_membersSubscription>>>(
    args?: {
      where?: Guild_membersWhereInput;
      orderBy?: Guild_membersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  guilds: <T = Promise<AsyncIterator<GuildsSubscription>>>(
    args?: {
      where?: GuildsWhereInput;
      orderBy?: GuildsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = Promise<AsyncIterator<MessagesSubscription>>>(
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  username: () => Promise<AsyncIterator<String>>;
}

export interface GuildsPreviousValuesNode {
  id: ID_Output;
  guildname: String;
  owner: String;
}

export interface GuildsPreviousValues
  extends Promise<GuildsPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  guildname: () => Promise<String>;
  owner: () => Promise<String>;
}

export interface GuildsPreviousValuesSubscription
  extends Promise<AsyncIterator<GuildsPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guildname: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<String>>;
}

export interface GuildsSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GuildsSubscriptionPayload
  extends Promise<GuildsSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Guilds>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuildsPreviousValues>() => T;
}

export interface GuildsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuildsSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuildsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuildsPreviousValuesSubscription>() => T;
}

export interface CredentialsNode {
  id: ID_Output;
  password: String;
}

export interface Credentials extends Promise<CredentialsNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  user: <T = Users>() => T;
}

export interface CredentialsSubscription
  extends Promise<AsyncIterator<CredentialsNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
  user: <T = UsersSubscription>() => T;
}

export interface MessagesEdgeNode {
  cursor: String;
}

export interface MessagesEdge extends Promise<MessagesEdgeNode>, Fragmentable {
  node: <T = Messages>() => T;
  cursor: () => Promise<String>;
}

export interface MessagesEdgeSubscription
  extends Promise<AsyncIterator<MessagesEdgeNode>>,
    Fragmentable {
  node: <T = MessagesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CredentialsEdgeNode {
  cursor: String;
}

export interface CredentialsEdge
  extends Promise<CredentialsEdgeNode>,
    Fragmentable {
  node: <T = Credentials>() => T;
  cursor: () => Promise<String>;
}

export interface CredentialsEdgeSubscription
  extends Promise<AsyncIterator<CredentialsEdgeNode>>,
    Fragmentable {
  node: <T = CredentialsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGuild_channelsNode {
  count: Int;
}

export interface AggregateGuild_channels
  extends Promise<AggregateGuild_channelsNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuild_channelsSubscription
  extends Promise<AsyncIterator<AggregateGuild_channelsNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GuildsConnectionNode {}

export interface GuildsConnection
  extends Promise<GuildsConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<GuildsEdgeNode>>() => T;
  aggregate: <T = AggregateGuilds>() => T;
}

export interface GuildsConnectionSubscription
  extends Promise<AsyncIterator<GuildsConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuildsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuildsSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Type Defs
 */

export const prisma: Prisma;
