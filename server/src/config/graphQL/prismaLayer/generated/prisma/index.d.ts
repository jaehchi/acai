// Code generated by Prisma (prisma@1.18.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  channels: (where?: ChannelsWhereInput) => Promise<boolean>;
  guilds: (where?: GuildsWhereInput) => Promise<boolean>;
  members: (where?: MembersWhereInput) => Promise<boolean>;
  messages: (where?: MessagesWhereInput) => Promise<boolean>;
  users: (where?: UsersWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  channels: (where: ChannelsWhereUniqueInput) => Channels;
  channelses: (
    args?: {
      where?: ChannelsWhereInput;
      orderBy?: ChannelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ChannelsNode>;
  channelsesConnection: (
    args?: {
      where?: ChannelsWhereInput;
      orderBy?: ChannelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ChannelsConnection;
  guilds: (where: GuildsWhereUniqueInput) => Guilds;
  guildses: (
    args?: {
      where?: GuildsWhereInput;
      orderBy?: GuildsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GuildsNode>;
  guildsesConnection: (
    args?: {
      where?: GuildsWhereInput;
      orderBy?: GuildsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GuildsConnection;
  members: (where: MembersWhereUniqueInput) => Members;
  memberses: (
    args?: {
      where?: MembersWhereInput;
      orderBy?: MembersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MembersNode>;
  membersesConnection: (
    args?: {
      where?: MembersWhereInput;
      orderBy?: MembersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MembersConnection;
  messages: (where: MessagesWhereUniqueInput) => Messages;
  messageses: (
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MessagesNode>;
  messagesesConnection: (
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MessagesConnection;
  users: (where: UsersWhereUniqueInput) => Users;
  userses: (
    args?: {
      where?: UsersWhereInput;
      orderBy?: UsersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UsersNode>;
  usersesConnection: (
    args?: {
      where?: UsersWhereInput;
      orderBy?: UsersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UsersConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChannels: (data: ChannelsCreateInput) => Channels;
  updateChannels: (
    args: { data: ChannelsUpdateInput; where: ChannelsWhereUniqueInput }
  ) => Channels;
  updateManyChannelses: (
    args: { data: ChannelsUpdateInput; where?: ChannelsWhereInput }
  ) => BatchPayload;
  upsertChannels: (
    args: {
      where: ChannelsWhereUniqueInput;
      create: ChannelsCreateInput;
      update: ChannelsUpdateInput;
    }
  ) => Channels;
  deleteChannels: (where: ChannelsWhereUniqueInput) => Channels;
  deleteManyChannelses: (where?: ChannelsWhereInput) => BatchPayload;
  createGuilds: (data: GuildsCreateInput) => Guilds;
  updateGuilds: (
    args: { data: GuildsUpdateInput; where: GuildsWhereUniqueInput }
  ) => Guilds;
  updateManyGuildses: (
    args: { data: GuildsUpdateInput; where?: GuildsWhereInput }
  ) => BatchPayload;
  upsertGuilds: (
    args: {
      where: GuildsWhereUniqueInput;
      create: GuildsCreateInput;
      update: GuildsUpdateInput;
    }
  ) => Guilds;
  deleteGuilds: (where: GuildsWhereUniqueInput) => Guilds;
  deleteManyGuildses: (where?: GuildsWhereInput) => BatchPayload;
  createMembers: (data: MembersCreateInput) => Members;
  updateMembers: (
    args: { data: MembersUpdateInput; where: MembersWhereUniqueInput }
  ) => Members;
  updateManyMemberses: (
    args: { data: MembersUpdateInput; where?: MembersWhereInput }
  ) => BatchPayload;
  upsertMembers: (
    args: {
      where: MembersWhereUniqueInput;
      create: MembersCreateInput;
      update: MembersUpdateInput;
    }
  ) => Members;
  deleteMembers: (where: MembersWhereUniqueInput) => Members;
  deleteManyMemberses: (where?: MembersWhereInput) => BatchPayload;
  createMessages: (data: MessagesCreateInput) => Messages;
  updateMessages: (
    args: { data: MessagesUpdateInput; where: MessagesWhereUniqueInput }
  ) => Messages;
  updateManyMessageses: (
    args: { data: MessagesUpdateInput; where?: MessagesWhereInput }
  ) => BatchPayload;
  upsertMessages: (
    args: {
      where: MessagesWhereUniqueInput;
      create: MessagesCreateInput;
      update: MessagesUpdateInput;
    }
  ) => Messages;
  deleteMessages: (where: MessagesWhereUniqueInput) => Messages;
  deleteManyMessageses: (where?: MessagesWhereInput) => BatchPayload;
  createUsers: (data: UsersCreateInput) => Users;
  updateUsers: (
    args: { data: UsersUpdateInput; where: UsersWhereUniqueInput }
  ) => Users;
  updateManyUserses: (
    args: { data: UsersUpdateInput; where?: UsersWhereInput }
  ) => BatchPayload;
  upsertUsers: (
    args: {
      where: UsersWhereUniqueInput;
      create: UsersCreateInput;
      update: UsersUpdateInput;
    }
  ) => Users;
  deleteUsers: (where: UsersWhereUniqueInput) => Users;
  deleteManyUserses: (where?: UsersWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  channels: (
    where?: ChannelsSubscriptionWhereInput
  ) => ChannelsSubscriptionPayloadSubscription;
  guilds: (
    where?: GuildsSubscriptionWhereInput
  ) => GuildsSubscriptionPayloadSubscription;
  members: (
    where?: MembersSubscriptionWhereInput
  ) => MembersSubscriptionPayloadSubscription;
  messages: (
    where?: MessagesSubscriptionWhereInput
  ) => MessagesSubscriptionPayloadSubscription;
  users: (
    where?: UsersSubscriptionWhereInput
  ) => UsersSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GuildsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "guildname_ASC"
  | "guildname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MembersOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessagesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ChannelsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "channelname_ASC"
  | "channelname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UsersOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GuildsUpdateOneWithoutChannelsInput {
  create?: GuildsCreateWithoutChannelsInput;
  update?: GuildsUpdateWithoutChannelsDataInput;
  upsert?: GuildsUpsertWithoutChannelsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GuildsWhereUniqueInput;
}

export type ChannelsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MembersUpdateManyWithoutUsersInput {
  create?: MembersCreateWithoutUsersInput[] | MembersCreateWithoutUsersInput;
  delete?: MembersWhereUniqueInput[] | MembersWhereUniqueInput;
  connect?: MembersWhereUniqueInput[] | MembersWhereUniqueInput;
  disconnect?: MembersWhereUniqueInput[] | MembersWhereUniqueInput;
  update?:
    | MembersUpdateWithWhereUniqueWithoutUsersInput[]
    | MembersUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | MembersUpsertWithWhereUniqueWithoutUsersInput[]
    | MembersUpsertWithWhereUniqueWithoutUsersInput;
}

export interface GuildsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guildname?: String;
  guildname_not?: String;
  guildname_in?: String[] | String;
  guildname_not_in?: String[] | String;
  guildname_lt?: String;
  guildname_lte?: String;
  guildname_gt?: String;
  guildname_gte?: String;
  guildname_contains?: String;
  guildname_not_contains?: String;
  guildname_starts_with?: String;
  guildname_not_starts_with?: String;
  guildname_ends_with?: String;
  guildname_not_ends_with?: String;
  owner?: UsersWhereInput;
  channels_every?: ChannelsWhereInput;
  channels_some?: ChannelsWhereInput;
  channels_none?: ChannelsWhereInput;
  members_every?: MembersWhereInput;
  members_some?: MembersWhereInput;
  members_none?: MembersWhereInput;
  AND?: GuildsWhereInput[] | GuildsWhereInput;
  OR?: GuildsWhereInput[] | GuildsWhereInput;
  NOT?: GuildsWhereInput[] | GuildsWhereInput;
}

export interface MembersUpdateWithWhereUniqueWithoutUsersInput {
  where: MembersWhereUniqueInput;
  data: MembersUpdateWithoutUsersDataInput;
}

export interface MembersWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guilds?: GuildsWhereInput;
  users?: UsersWhereInput;
  AND?: MembersWhereInput[] | MembersWhereInput;
  OR?: MembersWhereInput[] | MembersWhereInput;
  NOT?: MembersWhereInput[] | MembersWhereInput;
}

export interface MembersUpdateWithoutUsersDataInput {
  guilds?: GuildsUpdateOneWithoutMembersInput;
}

export interface ChannelsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  channelname?: String;
  channelname_not?: String;
  channelname_in?: String[] | String;
  channelname_not_in?: String[] | String;
  channelname_lt?: String;
  channelname_lte?: String;
  channelname_gt?: String;
  channelname_gte?: String;
  channelname_contains?: String;
  channelname_not_contains?: String;
  channelname_starts_with?: String;
  channelname_not_starts_with?: String;
  channelname_ends_with?: String;
  channelname_not_ends_with?: String;
  belongsTo?: GuildsWhereInput;
  messages_every?: MessagesWhereInput;
  messages_some?: MessagesWhereInput;
  messages_none?: MessagesWhereInput;
  AND?: ChannelsWhereInput[] | ChannelsWhereInput;
  OR?: ChannelsWhereInput[] | ChannelsWhereInput;
  NOT?: ChannelsWhereInput[] | ChannelsWhereInput;
}

export interface GuildsCreateManyWithoutOwnerInput {
  create?: GuildsCreateWithoutOwnerInput[] | GuildsCreateWithoutOwnerInput;
  connect?: GuildsWhereUniqueInput[] | GuildsWhereUniqueInput;
}

export interface ChannelsUpsertWithoutMessagesInput {
  update: ChannelsUpdateWithoutMessagesDataInput;
  create: ChannelsCreateWithoutMessagesInput;
}

export interface GuildsCreateWithoutOwnerInput {
  guildname: String;
  channels?: ChannelsCreateManyWithoutBelongsToInput;
  members?: MembersCreateManyWithoutGuildsInput;
}

export interface GuildsUpdateOneWithoutMembersInput {
  create?: GuildsCreateWithoutMembersInput;
  update?: GuildsUpdateWithoutMembersDataInput;
  upsert?: GuildsUpsertWithoutMembersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GuildsWhereUniqueInput;
}

export interface MembersCreateManyWithoutGuildsInput {
  create?: MembersCreateWithoutGuildsInput[] | MembersCreateWithoutGuildsInput;
  connect?: MembersWhereUniqueInput[] | MembersWhereUniqueInput;
}

export interface MessagesSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessagesWhereInput;
  AND?: MessagesSubscriptionWhereInput[] | MessagesSubscriptionWhereInput;
  OR?: MessagesSubscriptionWhereInput[] | MessagesSubscriptionWhereInput;
  NOT?: MessagesSubscriptionWhereInput[] | MessagesSubscriptionWhereInput;
}

export interface MembersCreateWithoutGuildsInput {
  users?: UsersCreateOneWithoutMemberOfInput;
}

export interface GuildsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GuildsWhereInput;
  AND?: GuildsSubscriptionWhereInput[] | GuildsSubscriptionWhereInput;
  OR?: GuildsSubscriptionWhereInput[] | GuildsSubscriptionWhereInput;
  NOT?: GuildsSubscriptionWhereInput[] | GuildsSubscriptionWhereInput;
}

export interface UsersCreateOneWithoutMemberOfInput {
  create?: UsersCreateWithoutMemberOfInput;
  connect?: UsersWhereUniqueInput;
}

export interface UsersUpdateInput {
  email?: String;
  username?: String;
  password?: String;
  ownerOf?: GuildsUpdateManyWithoutOwnerInput;
  memberOf?: MembersUpdateManyWithoutUsersInput;
  messages?: MessagesUpdateManyWithoutAuthorInput;
}

export interface UsersCreateWithoutMemberOfInput {
  email: String;
  username: String;
  password: String;
  ownerOf?: GuildsCreateManyWithoutOwnerInput;
  messages?: MessagesCreateManyWithoutAuthorInput;
}

export interface MessagesUpdateInput {
  content?: String;
  author?: UsersUpdateOneWithoutMessagesInput;
  channel?: ChannelsUpdateOneWithoutMessagesInput;
}

export interface MessagesCreateManyWithoutAuthorInput {
  create?:
    | MessagesCreateWithoutAuthorInput[]
    | MessagesCreateWithoutAuthorInput;
  connect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
}

export interface MessagesCreateInput {
  content: String;
  author?: UsersCreateOneWithoutMessagesInput;
  channel?: ChannelsCreateOneWithoutMessagesInput;
}

export interface MessagesCreateWithoutAuthorInput {
  content: String;
  channel?: ChannelsCreateOneWithoutMessagesInput;
}

export interface MembersCreateInput {
  guilds?: GuildsCreateOneWithoutMembersInput;
  users?: UsersCreateOneWithoutMemberOfInput;
}

export interface ChannelsCreateOneWithoutMessagesInput {
  create?: ChannelsCreateWithoutMessagesInput;
  connect?: ChannelsWhereUniqueInput;
}

export interface GuildsUpdateInput {
  guildname?: String;
  owner?: UsersUpdateOneWithoutOwnerOfInput;
  channels?: ChannelsUpdateManyWithoutBelongsToInput;
  members?: MembersUpdateManyWithoutGuildsInput;
}

export interface ChannelsCreateWithoutMessagesInput {
  type: Int;
  channelname: String;
  belongsTo?: GuildsCreateOneWithoutChannelsInput;
}

export interface GuildsUpsertWithoutChannelsInput {
  update: GuildsUpdateWithoutChannelsDataInput;
  create: GuildsCreateWithoutChannelsInput;
}

export interface ChannelsUpdateInput {
  type?: Int;
  channelname?: String;
  belongsTo?: GuildsUpdateOneWithoutChannelsInput;
  messages?: MessagesUpdateManyWithoutChannelInput;
}

export interface UsersUpsertWithoutOwnerOfInput {
  update: UsersUpdateWithoutOwnerOfDataInput;
  create: UsersCreateWithoutOwnerOfInput;
}

export interface MembersUpsertWithWhereUniqueWithoutGuildsInput {
  where: MembersWhereUniqueInput;
  update: MembersUpdateWithoutGuildsDataInput;
  create: MembersCreateWithoutGuildsInput;
}

export interface GuildsUpsertWithoutMembersInput {
  update: GuildsUpdateWithoutMembersDataInput;
  create: GuildsCreateWithoutMembersInput;
}

export interface GuildsUpdateWithoutChannelsDataInput {
  guildname?: String;
  owner?: UsersUpdateOneWithoutOwnerOfInput;
  members?: MembersUpdateManyWithoutGuildsInput;
}

export interface ChannelsUpsertWithWhereUniqueWithoutBelongsToInput {
  where: ChannelsWhereUniqueInput;
  update: ChannelsUpdateWithoutBelongsToDataInput;
  create: ChannelsCreateWithoutBelongsToInput;
}

export interface UsersUpdateOneWithoutOwnerOfInput {
  create?: UsersCreateWithoutOwnerOfInput;
  update?: UsersUpdateWithoutOwnerOfDataInput;
  upsert?: UsersUpsertWithoutOwnerOfInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UsersWhereUniqueInput;
}

export interface UsersUpsertWithoutMessagesInput {
  update: UsersUpdateWithoutMessagesDataInput;
  create: UsersCreateWithoutMessagesInput;
}

export interface UsersUpdateWithoutOwnerOfDataInput {
  email?: String;
  username?: String;
  password?: String;
  memberOf?: MembersUpdateManyWithoutUsersInput;
  messages?: MessagesUpdateManyWithoutAuthorInput;
}

export interface GuildsCreateOneWithoutChannelsInput {
  create?: GuildsCreateWithoutChannelsInput;
  connect?: GuildsWhereUniqueInput;
}

export interface UsersWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  ownerOf_every?: GuildsWhereInput;
  ownerOf_some?: GuildsWhereInput;
  ownerOf_none?: GuildsWhereInput;
  memberOf_every?: MembersWhereInput;
  memberOf_some?: MembersWhereInput;
  memberOf_none?: MembersWhereInput;
  messages_every?: MessagesWhereInput;
  messages_some?: MessagesWhereInput;
  messages_none?: MessagesWhereInput;
  AND?: UsersWhereInput[] | UsersWhereInput;
  OR?: UsersWhereInput[] | UsersWhereInput;
  NOT?: UsersWhereInput[] | UsersWhereInput;
}

export interface UsersCreateOneWithoutOwnerOfInput {
  create?: UsersCreateWithoutOwnerOfInput;
  connect?: UsersWhereUniqueInput;
}

export interface MessagesWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: UsersWhereInput;
  channel?: ChannelsWhereInput;
  AND?: MessagesWhereInput[] | MessagesWhereInput;
  OR?: MessagesWhereInput[] | MessagesWhereInput;
  NOT?: MessagesWhereInput[] | MessagesWhereInput;
}

export interface MembersCreateManyWithoutUsersInput {
  create?: MembersCreateWithoutUsersInput[] | MembersCreateWithoutUsersInput;
  connect?: MembersWhereUniqueInput[] | MembersWhereUniqueInput;
}

export interface UsersUpsertWithoutMemberOfInput {
  update: UsersUpdateWithoutMemberOfDataInput;
  create: UsersCreateWithoutMemberOfInput;
}

export interface GuildsCreateOneWithoutMembersInput {
  create?: GuildsCreateWithoutMembersInput;
  connect?: GuildsWhereUniqueInput;
}

export interface MessagesUpsertWithWhereUniqueWithoutAuthorInput {
  where: MessagesWhereUniqueInput;
  update: MessagesUpdateWithoutAuthorDataInput;
  create: MessagesCreateWithoutAuthorInput;
}

export interface ChannelsCreateManyWithoutBelongsToInput {
  create?:
    | ChannelsCreateWithoutBelongsToInput[]
    | ChannelsCreateWithoutBelongsToInput;
  connect?: ChannelsWhereUniqueInput[] | ChannelsWhereUniqueInput;
}

export interface GuildsUpdateWithoutMembersDataInput {
  guildname?: String;
  owner?: UsersUpdateOneWithoutOwnerOfInput;
  channels?: ChannelsUpdateManyWithoutBelongsToInput;
}

export interface MessagesCreateManyWithoutChannelInput {
  create?:
    | MessagesCreateWithoutChannelInput[]
    | MessagesCreateWithoutChannelInput;
  connect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
}

export interface ChannelsUpdateManyWithoutBelongsToInput {
  create?:
    | ChannelsCreateWithoutBelongsToInput[]
    | ChannelsCreateWithoutBelongsToInput;
  delete?: ChannelsWhereUniqueInput[] | ChannelsWhereUniqueInput;
  connect?: ChannelsWhereUniqueInput[] | ChannelsWhereUniqueInput;
  disconnect?: ChannelsWhereUniqueInput[] | ChannelsWhereUniqueInput;
  update?:
    | ChannelsUpdateWithWhereUniqueWithoutBelongsToInput[]
    | ChannelsUpdateWithWhereUniqueWithoutBelongsToInput;
  upsert?:
    | ChannelsUpsertWithWhereUniqueWithoutBelongsToInput[]
    | ChannelsUpsertWithWhereUniqueWithoutBelongsToInput;
}

export interface UsersCreateOneWithoutMessagesInput {
  create?: UsersCreateWithoutMessagesInput;
  connect?: UsersWhereUniqueInput;
}

export interface ChannelsUpdateWithWhereUniqueWithoutBelongsToInput {
  where: ChannelsWhereUniqueInput;
  data: ChannelsUpdateWithoutBelongsToDataInput;
}

export interface UsersSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UsersWhereInput;
  AND?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
  OR?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
  NOT?: UsersSubscriptionWhereInput[] | UsersSubscriptionWhereInput;
}

export interface ChannelsUpdateWithoutBelongsToDataInput {
  type?: Int;
  channelname?: String;
  messages?: MessagesUpdateManyWithoutChannelInput;
}

export interface ChannelsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ChannelsWhereInput;
  AND?: ChannelsSubscriptionWhereInput[] | ChannelsSubscriptionWhereInput;
  OR?: ChannelsSubscriptionWhereInput[] | ChannelsSubscriptionWhereInput;
  NOT?: ChannelsSubscriptionWhereInput[] | ChannelsSubscriptionWhereInput;
}

export interface MessagesUpdateManyWithoutChannelInput {
  create?:
    | MessagesCreateWithoutChannelInput[]
    | MessagesCreateWithoutChannelInput;
  delete?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  connect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  disconnect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  update?:
    | MessagesUpdateWithWhereUniqueWithoutChannelInput[]
    | MessagesUpdateWithWhereUniqueWithoutChannelInput;
  upsert?:
    | MessagesUpsertWithWhereUniqueWithoutChannelInput[]
    | MessagesUpsertWithWhereUniqueWithoutChannelInput;
}

export type GuildsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessagesUpdateWithWhereUniqueWithoutChannelInput {
  where: MessagesWhereUniqueInput;
  data: MessagesUpdateWithoutChannelDataInput;
}

export type MembersWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessagesUpdateWithoutChannelDataInput {
  content?: String;
  author?: UsersUpdateOneWithoutMessagesInput;
}

export type MessagesWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UsersUpdateOneWithoutMessagesInput {
  create?: UsersCreateWithoutMessagesInput;
  update?: UsersUpdateWithoutMessagesDataInput;
  upsert?: UsersUpsertWithoutMessagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UsersWhereUniqueInput;
}

export type UsersWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  username?: String;
}>;

export interface UsersUpdateWithoutMessagesDataInput {
  email?: String;
  username?: String;
  password?: String;
  ownerOf?: GuildsUpdateManyWithoutOwnerInput;
  memberOf?: MembersUpdateManyWithoutUsersInput;
}

export interface GuildsUpsertWithWhereUniqueWithoutOwnerInput {
  where: GuildsWhereUniqueInput;
  update: GuildsUpdateWithoutOwnerDataInput;
  create: GuildsCreateWithoutOwnerInput;
}

export interface GuildsUpdateManyWithoutOwnerInput {
  create?: GuildsCreateWithoutOwnerInput[] | GuildsCreateWithoutOwnerInput;
  delete?: GuildsWhereUniqueInput[] | GuildsWhereUniqueInput;
  connect?: GuildsWhereUniqueInput[] | GuildsWhereUniqueInput;
  disconnect?: GuildsWhereUniqueInput[] | GuildsWhereUniqueInput;
  update?:
    | GuildsUpdateWithWhereUniqueWithoutOwnerInput[]
    | GuildsUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | GuildsUpsertWithWhereUniqueWithoutOwnerInput[]
    | GuildsUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface GuildsCreateWithoutChannelsInput {
  guildname: String;
  owner?: UsersCreateOneWithoutOwnerOfInput;
  members?: MembersCreateManyWithoutGuildsInput;
}

export interface GuildsUpdateWithWhereUniqueWithoutOwnerInput {
  where: GuildsWhereUniqueInput;
  data: GuildsUpdateWithoutOwnerDataInput;
}

export interface MembersCreateWithoutUsersInput {
  guilds?: GuildsCreateOneWithoutMembersInput;
}

export interface GuildsUpdateWithoutOwnerDataInput {
  guildname?: String;
  channels?: ChannelsUpdateManyWithoutBelongsToInput;
  members?: MembersUpdateManyWithoutGuildsInput;
}

export interface ChannelsCreateWithoutBelongsToInput {
  type: Int;
  channelname: String;
  messages?: MessagesCreateManyWithoutChannelInput;
}

export interface MembersUpdateManyWithoutGuildsInput {
  create?: MembersCreateWithoutGuildsInput[] | MembersCreateWithoutGuildsInput;
  delete?: MembersWhereUniqueInput[] | MembersWhereUniqueInput;
  connect?: MembersWhereUniqueInput[] | MembersWhereUniqueInput;
  disconnect?: MembersWhereUniqueInput[] | MembersWhereUniqueInput;
  update?:
    | MembersUpdateWithWhereUniqueWithoutGuildsInput[]
    | MembersUpdateWithWhereUniqueWithoutGuildsInput;
  upsert?:
    | MembersUpsertWithWhereUniqueWithoutGuildsInput[]
    | MembersUpsertWithWhereUniqueWithoutGuildsInput;
}

export interface UsersCreateWithoutMessagesInput {
  email: String;
  username: String;
  password: String;
  ownerOf?: GuildsCreateManyWithoutOwnerInput;
  memberOf?: MembersCreateManyWithoutUsersInput;
}

export interface MembersUpdateWithWhereUniqueWithoutGuildsInput {
  where: MembersWhereUniqueInput;
  data: MembersUpdateWithoutGuildsDataInput;
}

export interface UsersCreateInput {
  email: String;
  username: String;
  password: String;
  ownerOf?: GuildsCreateManyWithoutOwnerInput;
  memberOf?: MembersCreateManyWithoutUsersInput;
  messages?: MessagesCreateManyWithoutAuthorInput;
}

export interface MembersUpdateWithoutGuildsDataInput {
  users?: UsersUpdateOneWithoutMemberOfInput;
}

export interface GuildsCreateInput {
  guildname: String;
  owner?: UsersCreateOneWithoutOwnerOfInput;
  channels?: ChannelsCreateManyWithoutBelongsToInput;
  members?: MembersCreateManyWithoutGuildsInput;
}

export interface UsersUpdateOneWithoutMemberOfInput {
  create?: UsersCreateWithoutMemberOfInput;
  update?: UsersUpdateWithoutMemberOfDataInput;
  upsert?: UsersUpsertWithoutMemberOfInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UsersWhereUniqueInput;
}

export interface MessagesUpsertWithWhereUniqueWithoutChannelInput {
  where: MessagesWhereUniqueInput;
  update: MessagesUpdateWithoutChannelDataInput;
  create: MessagesCreateWithoutChannelInput;
}

export interface UsersUpdateWithoutMemberOfDataInput {
  email?: String;
  username?: String;
  password?: String;
  ownerOf?: GuildsUpdateManyWithoutOwnerInput;
  messages?: MessagesUpdateManyWithoutAuthorInput;
}

export interface UsersCreateWithoutOwnerOfInput {
  email: String;
  username: String;
  password: String;
  memberOf?: MembersCreateManyWithoutUsersInput;
  messages?: MessagesCreateManyWithoutAuthorInput;
}

export interface MessagesUpdateManyWithoutAuthorInput {
  create?:
    | MessagesCreateWithoutAuthorInput[]
    | MessagesCreateWithoutAuthorInput;
  delete?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  connect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  disconnect?: MessagesWhereUniqueInput[] | MessagesWhereUniqueInput;
  update?:
    | MessagesUpdateWithWhereUniqueWithoutAuthorInput[]
    | MessagesUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | MessagesUpsertWithWhereUniqueWithoutAuthorInput[]
    | MessagesUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface MessagesCreateWithoutChannelInput {
  content: String;
  author?: UsersCreateOneWithoutMessagesInput;
}

export interface ChannelsUpdateWithoutMessagesDataInput {
  type?: Int;
  channelname?: String;
  belongsTo?: GuildsUpdateOneWithoutChannelsInput;
}

export interface ChannelsUpdateOneWithoutMessagesInput {
  create?: ChannelsCreateWithoutMessagesInput;
  update?: ChannelsUpdateWithoutMessagesDataInput;
  upsert?: ChannelsUpsertWithoutMessagesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ChannelsWhereUniqueInput;
}

export interface MessagesUpdateWithoutAuthorDataInput {
  content?: String;
  channel?: ChannelsUpdateOneWithoutMessagesInput;
}

export interface MessagesUpdateWithWhereUniqueWithoutAuthorInput {
  where: MessagesWhereUniqueInput;
  data: MessagesUpdateWithoutAuthorDataInput;
}

export interface MembersSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MembersWhereInput;
  AND?: MembersSubscriptionWhereInput[] | MembersSubscriptionWhereInput;
  OR?: MembersSubscriptionWhereInput[] | MembersSubscriptionWhereInput;
  NOT?: MembersSubscriptionWhereInput[] | MembersSubscriptionWhereInput;
}

export interface GuildsCreateWithoutMembersInput {
  guildname: String;
  owner?: UsersCreateOneWithoutOwnerOfInput;
  channels?: ChannelsCreateManyWithoutBelongsToInput;
}

export interface ChannelsCreateInput {
  type: Int;
  channelname: String;
  belongsTo?: GuildsCreateOneWithoutChannelsInput;
  messages?: MessagesCreateManyWithoutChannelInput;
}

export interface MembersUpsertWithWhereUniqueWithoutUsersInput {
  where: MembersWhereUniqueInput;
  update: MembersUpdateWithoutUsersDataInput;
  create: MembersCreateWithoutUsersInput;
}

export interface MembersUpdateInput {
  guilds?: GuildsUpdateOneWithoutMembersInput;
  users?: UsersUpdateOneWithoutMemberOfInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UsersPreviousValuesNode {
  id: ID_Output;
  email: String;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UsersPreviousValues
  extends Promise<UsersPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UsersPreviousValuesSubscription
  extends Promise<AsyncIterator<UsersPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateChannelsNode {
  count: Int;
}

export interface AggregateChannels
  extends Promise<AggregateChannelsNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChannelsSubscription
  extends Promise<AsyncIterator<AggregateChannelsNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UsersNode {
  id: ID_Output;
  email: String;
  username: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Users extends Promise<UsersNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  ownerOf: <T = FragmentableArray<GuildsNode>>(
    args?: {
      where?: GuildsWhereInput;
      orderBy?: GuildsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  memberOf: <T = FragmentableArray<MembersNode>>(
    args?: {
      where?: MembersWhereInput;
      orderBy?: MembersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = FragmentableArray<MessagesNode>>(
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UsersSubscription
  extends Promise<AsyncIterator<UsersNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ownerOf: <T = Promise<AsyncIterator<GuildsSubscription>>>(
    args?: {
      where?: GuildsWhereInput;
      orderBy?: GuildsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  memberOf: <T = Promise<AsyncIterator<MembersSubscription>>>(
    args?: {
      where?: MembersWhereInput;
      orderBy?: MembersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  messages: <T = Promise<AsyncIterator<MessagesSubscription>>>(
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ChannelsEdgeNode {
  cursor: String;
}

export interface ChannelsEdge extends Promise<ChannelsEdgeNode>, Fragmentable {
  node: <T = Channels>() => T;
  cursor: () => Promise<String>;
}

export interface ChannelsEdgeSubscription
  extends Promise<AsyncIterator<ChannelsEdgeNode>>,
    Fragmentable {
  node: <T = ChannelsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MembersNode {
  id: ID_Output;
}

export interface Members extends Promise<MembersNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  guilds: <T = Guilds>() => T;
  users: <T = Users>() => T;
}

export interface MembersSubscription
  extends Promise<AsyncIterator<MembersNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guilds: <T = GuildsSubscription>() => T;
  users: <T = UsersSubscription>() => T;
}

export interface MessagesPreviousValuesNode {
  id: ID_Output;
  content: String;
}

export interface MessagesPreviousValues
  extends Promise<MessagesPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
}

export interface MessagesPreviousValuesSubscription
  extends Promise<AsyncIterator<MessagesPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface MessagesNode {
  id: ID_Output;
  content: String;
}

export interface Messages extends Promise<MessagesNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  author: <T = Users>() => T;
  channel: <T = Channels>() => T;
}

export interface MessagesSubscription
  extends Promise<AsyncIterator<MessagesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UsersSubscription>() => T;
  channel: <T = ChannelsSubscription>() => T;
}

export interface AggregateUsersNode {
  count: Int;
}

export interface AggregateUsers
  extends Promise<AggregateUsersNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsersSubscription
  extends Promise<AsyncIterator<AggregateUsersNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UsersEdgeNode {
  cursor: String;
}

export interface UsersEdge extends Promise<UsersEdgeNode>, Fragmentable {
  node: <T = Users>() => T;
  cursor: () => Promise<String>;
}

export interface UsersEdgeSubscription
  extends Promise<AsyncIterator<UsersEdgeNode>>,
    Fragmentable {
  node: <T = UsersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UsersConnectionNode {}

export interface UsersConnection
  extends Promise<UsersConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UsersEdgeNode>>() => T;
  aggregate: <T = AggregateUsers>() => T;
}

export interface UsersConnectionSubscription
  extends Promise<AsyncIterator<UsersConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsersSubscription>() => T;
}

export interface AggregateMessagesNode {
  count: Int;
}

export interface AggregateMessages
  extends Promise<AggregateMessagesNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessagesSubscription
  extends Promise<AsyncIterator<AggregateMessagesNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MessagesConnectionNode {}

export interface MessagesConnection
  extends Promise<MessagesConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MessagesEdgeNode>>() => T;
  aggregate: <T = AggregateMessages>() => T;
}

export interface MessagesConnectionSubscription
  extends Promise<AsyncIterator<MessagesConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessagesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessagesSubscription>() => T;
}

export interface ChannelsNode {
  id: ID_Output;
  type: Int;
  channelname: String;
}

export interface Channels extends Promise<ChannelsNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
  channelname: () => Promise<String>;
  belongsTo: <T = Guilds>() => T;
  messages: <T = FragmentableArray<MessagesNode>>(
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ChannelsSubscription
  extends Promise<AsyncIterator<ChannelsNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
  channelname: () => Promise<AsyncIterator<String>>;
  belongsTo: <T = GuildsSubscription>() => T;
  messages: <T = Promise<AsyncIterator<MessagesSubscription>>>(
    args?: {
      where?: MessagesWhereInput;
      orderBy?: MessagesOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChannelsSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ChannelsSubscriptionPayload
  extends Promise<ChannelsSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Channels>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChannelsPreviousValues>() => T;
}

export interface ChannelsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChannelsSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChannelsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChannelsPreviousValuesSubscription>() => T;
}

export interface MembersEdgeNode {
  cursor: String;
}

export interface MembersEdge extends Promise<MembersEdgeNode>, Fragmentable {
  node: <T = Members>() => T;
  cursor: () => Promise<String>;
}

export interface MembersEdgeSubscription
  extends Promise<AsyncIterator<MembersEdgeNode>>,
    Fragmentable {
  node: <T = MembersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChannelsPreviousValuesNode {
  id: ID_Output;
  type: Int;
  channelname: String;
}

export interface ChannelsPreviousValues
  extends Promise<ChannelsPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
  channelname: () => Promise<String>;
}

export interface ChannelsPreviousValuesSubscription
  extends Promise<AsyncIterator<ChannelsPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
  channelname: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGuildsNode {
  count: Int;
}

export interface AggregateGuilds
  extends Promise<AggregateGuildsNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGuildsSubscription
  extends Promise<AsyncIterator<AggregateGuildsNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChannelsConnectionNode {}

export interface ChannelsConnection
  extends Promise<ChannelsConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ChannelsEdgeNode>>() => T;
  aggregate: <T = AggregateChannels>() => T;
}

export interface ChannelsConnectionSubscription
  extends Promise<AsyncIterator<ChannelsConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChannelsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChannelsSubscription>() => T;
}

export interface GuildsConnectionNode {}

export interface GuildsConnection
  extends Promise<GuildsConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<GuildsEdgeNode>>() => T;
  aggregate: <T = AggregateGuilds>() => T;
}

export interface GuildsConnectionSubscription
  extends Promise<AsyncIterator<GuildsConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GuildsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGuildsSubscription>() => T;
}

export interface GuildsSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GuildsSubscriptionPayload
  extends Promise<GuildsSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Guilds>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GuildsPreviousValues>() => T;
}

export interface GuildsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GuildsSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GuildsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GuildsPreviousValuesSubscription>() => T;
}

export interface MessagesEdgeNode {
  cursor: String;
}

export interface MessagesEdge extends Promise<MessagesEdgeNode>, Fragmentable {
  node: <T = Messages>() => T;
  cursor: () => Promise<String>;
}

export interface MessagesEdgeSubscription
  extends Promise<AsyncIterator<MessagesEdgeNode>>,
    Fragmentable {
  node: <T = MessagesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GuildsNode {
  id: ID_Output;
  guildname: String;
}

export interface Guilds extends Promise<GuildsNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  guildname: () => Promise<String>;
  owner: <T = Users>() => T;
  channels: <T = FragmentableArray<ChannelsNode>>(
    args?: {
      where?: ChannelsWhereInput;
      orderBy?: ChannelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  members: <T = FragmentableArray<MembersNode>>(
    args?: {
      where?: MembersWhereInput;
      orderBy?: MembersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GuildsSubscription
  extends Promise<AsyncIterator<GuildsNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guildname: () => Promise<AsyncIterator<String>>;
  owner: <T = UsersSubscription>() => T;
  channels: <T = Promise<AsyncIterator<ChannelsSubscription>>>(
    args?: {
      where?: ChannelsWhereInput;
      orderBy?: ChannelsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  members: <T = Promise<AsyncIterator<MembersSubscription>>>(
    args?: {
      where?: MembersWhereInput;
      orderBy?: MembersOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MembersPreviousValuesNode {
  id: ID_Output;
}

export interface MembersPreviousValues
  extends Promise<MembersPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface MembersPreviousValuesSubscription
  extends Promise<AsyncIterator<MembersPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface MembersSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MembersSubscriptionPayload
  extends Promise<MembersSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Members>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MembersPreviousValues>() => T;
}

export interface MembersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MembersSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MembersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MembersPreviousValuesSubscription>() => T;
}

export interface MessagesSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MessagesSubscriptionPayload
  extends Promise<MessagesSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Messages>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagesPreviousValues>() => T;
}

export interface MessagesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessagesSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessagesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagesPreviousValuesSubscription>() => T;
}

export interface GuildsPreviousValuesNode {
  id: ID_Output;
  guildname: String;
}

export interface GuildsPreviousValues
  extends Promise<GuildsPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  guildname: () => Promise<String>;
}

export interface GuildsPreviousValuesSubscription
  extends Promise<AsyncIterator<GuildsPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guildname: () => Promise<AsyncIterator<String>>;
}

export interface MembersConnectionNode {}

export interface MembersConnection
  extends Promise<MembersConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MembersEdgeNode>>() => T;
  aggregate: <T = AggregateMembers>() => T;
}

export interface MembersConnectionSubscription
  extends Promise<AsyncIterator<MembersConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MembersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMembersSubscription>() => T;
}

export interface AggregateMembersNode {
  count: Int;
}

export interface AggregateMembers
  extends Promise<AggregateMembersNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMembersSubscription
  extends Promise<AsyncIterator<AggregateMembersNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UsersSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UsersSubscriptionPayload
  extends Promise<UsersSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Users>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsersPreviousValues>() => T;
}

export interface UsersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsersSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsersPreviousValuesSubscription>() => T;
}

export interface GuildsEdgeNode {
  cursor: String;
}

export interface GuildsEdge extends Promise<GuildsEdgeNode>, Fragmentable {
  node: <T = Guilds>() => T;
  cursor: () => Promise<String>;
}

export interface GuildsEdgeSubscription
  extends Promise<AsyncIterator<GuildsEdgeNode>>,
    Fragmentable {
  node: <T = GuildsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
